
Parking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003848  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00003848  000038dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000a2  008000a2  0000391e  2**0
                  ALLOC
  3 .stab         00003318  00000000  00000000  00003920  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001736  00000000  00000000  00006c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000836e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000084ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000865d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b7a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c728  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000cb6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3a       	cpi	r26, 0xA9	; 169
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <main>
      8a:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e9       	ldi	r26, 0x99	; 153
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e9       	ldi	r24, 0x99	; 153
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c2 1b 	jmp	0x3784	; 0x3784 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e9       	ldi	r22, 0x99	; 153
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 de 1b 	jmp	0x37bc	; 0x37bc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e2 1b 	jmp	0x37c4	; 0x37c4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     cc8:	80 91 a2 00 	lds	r24, 0x00A2
     ccc:	90 91 a3 00 	lds	r25, 0x00A3
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	29 f0       	breq	.+10     	; 0xcde <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     cd4:	e0 91 a2 00 	lds	r30, 0x00A2
     cd8:	f0 91 a3 00 	lds	r31, 0x00A3
     cdc:	09 95       	icall
	}
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <ICU_init+0x6>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	9a 83       	std	Y+2, r25	; 0x02
     d10:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
     d12:	a1 e3       	ldi	r26, 0x31	; 49
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e1 e3       	ldi	r30, 0x31	; 49
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 7b       	andi	r24, 0xBF	; 191
     d1e:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     d20:	ef e4       	ldi	r30, 0x4F	; 79
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	8c e0       	ldi	r24, 0x0C	; 12
     d26:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     d28:	ae e4       	ldi	r26, 0x4E	; 78
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ee e4       	ldi	r30, 0x4E	; 78
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	98 2f       	mov	r25, r24
     d34:	98 7f       	andi	r25, 0xF8	; 248
     d36:	e9 81       	ldd	r30, Y+1	; 0x01
     d38:	fa 81       	ldd	r31, Y+2	; 0x02
     d3a:	80 81       	ld	r24, Z
     d3c:	89 2b       	or	r24, r25
     d3e:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
     d40:	ae e4       	ldi	r26, 0x4E	; 78
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	ee e4       	ldi	r30, 0x4E	; 78
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	28 2f       	mov	r18, r24
     d4c:	2f 7b       	andi	r18, 0xBF	; 191
     d4e:	e9 81       	ldd	r30, Y+1	; 0x01
     d50:	fa 81       	ldd	r31, Y+2	; 0x02
     d52:	81 81       	ldd	r24, Z+1	; 0x01
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	00 24       	eor	r0, r0
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	07 94       	ror	r0
     d60:	96 95       	lsr	r25
     d62:	87 95       	ror	r24
     d64:	07 94       	ror	r0
     d66:	98 2f       	mov	r25, r24
     d68:	80 2d       	mov	r24, r0
     d6a:	82 2b       	or	r24, r18
     d6c:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
     d6e:	ec e4       	ldi	r30, 0x4C	; 76
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	11 82       	std	Z+1, r1	; 0x01
     d74:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
     d76:	e6 e4       	ldi	r30, 0x46	; 70
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	11 82       	std	Z+1, r1	; 0x01
     d7c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
     d7e:	a9 e5       	ldi	r26, 0x59	; 89
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e9 e5       	ldi	r30, 0x59	; 89
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	80 62       	ori	r24, 0x20	; 32
     d8a:	8c 93       	st	X, r24
}
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <ICU_setCallBack+0x6>
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	90 93 a3 00 	sts	0x00A3, r25
     dac:	80 93 a2 00 	sts	0x00A2, r24
}
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	0f 92       	push	r0
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
     dc6:	ae e4       	ldi	r26, 0x4E	; 78
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ee e4       	ldi	r30, 0x4E	; 78
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	28 2f       	mov	r18, r24
     dd2:	2f 7b       	andi	r18, 0xBF	; 191
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	88 2f       	mov	r24, r24
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	00 24       	eor	r0, r0
     ddc:	96 95       	lsr	r25
     dde:	87 95       	ror	r24
     de0:	07 94       	ror	r0
     de2:	96 95       	lsr	r25
     de4:	87 95       	ror	r24
     de6:	07 94       	ror	r0
     de8:	98 2f       	mov	r25, r24
     dea:	80 2d       	mov	r24, r0
     dec:	82 2b       	or	r24, r18
     dee:	8c 93       	st	X, r24
}
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     e00:	e6 e4       	ldi	r30, 0x46	; 70
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     e16:	ec e4       	ldi	r30, 0x4C	; 76
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	11 82       	std	Z+1, r1	; 0x01
     e1c:	10 82       	st	Z, r1
}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
     e2c:	ef e4       	ldi	r30, 0x4F	; 79
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	10 82       	st	Z, r1
	TCCR1B = 0;
     e32:	ee e4       	ldi	r30, 0x4E	; 78
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	10 82       	st	Z, r1
	TCNT1 = 0;
     e38:	ec e4       	ldi	r30, 0x4C	; 76
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	11 82       	std	Z+1, r1	; 0x01
     e3e:	10 82       	st	Z, r1
	ICR1 = 0;
     e40:	e6 e4       	ldi	r30, 0x46	; 70
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	11 82       	std	Z+1, r1	; 0x01
     e46:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
     e48:	a9 e5       	ldi	r26, 0x59	; 89
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e9 e5       	ldi	r30, 0x59	; 89
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8f 7d       	andi	r24, 0xDF	; 223
     e54:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
     e56:	10 92 a3 00 	sts	0x00A3, r1
     e5a:	10 92 a2 00 	sts	0x00A2, r1
}
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <GPIO_setupPinDirection+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <GPIO_setupPinDirection+0x8>
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	6a 83       	std	Y+2, r22	; 0x02
     e76:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	88 30       	cpi	r24, 0x08	; 8
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <GPIO_setupPinDirection+0x1c>
     e7e:	d5 c0       	rjmp	.+426    	; 0x102a <GPIO_setupPinDirection+0x1c6>
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	84 30       	cpi	r24, 0x04	; 4
     e84:	08 f0       	brcs	.+2      	; 0xe88 <GPIO_setupPinDirection+0x24>
     e86:	d1 c0       	rjmp	.+418    	; 0x102a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	3d 83       	std	Y+5, r19	; 0x05
     e90:	2c 83       	std	Y+4, r18	; 0x04
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	9d 81       	ldd	r25, Y+5	; 0x05
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	91 05       	cpc	r25, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <GPIO_setupPinDirection+0x3a>
     e9c:	43 c0       	rjmp	.+134    	; 0xf24 <GPIO_setupPinDirection+0xc0>
     e9e:	2c 81       	ldd	r18, Y+4	; 0x04
     ea0:	3d 81       	ldd	r19, Y+5	; 0x05
     ea2:	22 30       	cpi	r18, 0x02	; 2
     ea4:	31 05       	cpc	r19, r1
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <GPIO_setupPinDirection+0x4e>
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	71 f0       	breq	.+28     	; 0xecc <GPIO_setupPinDirection+0x68>
     eb0:	bc c0       	rjmp	.+376    	; 0x102a <GPIO_setupPinDirection+0x1c6>
     eb2:	2c 81       	ldd	r18, Y+4	; 0x04
     eb4:	3d 81       	ldd	r19, Y+5	; 0x05
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	31 05       	cpc	r19, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <GPIO_setupPinDirection+0x5a>
     ebc:	5f c0       	rjmp	.+190    	; 0xf7c <GPIO_setupPinDirection+0x118>
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	83 30       	cpi	r24, 0x03	; 3
     ec4:	91 05       	cpc	r25, r1
     ec6:	09 f4       	brne	.+2      	; 0xeca <GPIO_setupPinDirection+0x66>
     ec8:	85 c0       	rjmp	.+266    	; 0xfd4 <GPIO_setupPinDirection+0x170>
     eca:	af c0       	rjmp	.+350    	; 0x102a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	a1 f4       	brne	.+40     	; 0xefa <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ed2:	aa e3       	ldi	r26, 0x3A	; 58
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ea e3       	ldi	r30, 0x3A	; 58
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <GPIO_setupPinDirection+0x8c>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <GPIO_setupPinDirection+0x88>
     ef4:	84 2b       	or	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	98 c0       	rjmp	.+304    	; 0x102a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     efa:	aa e3       	ldi	r26, 0x3A	; 58
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ea e3       	ldi	r30, 0x3A	; 58
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <GPIO_setupPinDirection+0xb4>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <GPIO_setupPinDirection+0xb0>
     f1c:	80 95       	com	r24
     f1e:	84 23       	and	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	83 c0       	rjmp	.+262    	; 0x102a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	a1 f4       	brne	.+40     	; 0xf52 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f2a:	a7 e3       	ldi	r26, 0x37	; 55
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e7 e3       	ldi	r30, 0x37	; 55
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <GPIO_setupPinDirection+0xe4>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <GPIO_setupPinDirection+0xe0>
     f4c:	84 2b       	or	r24, r20
     f4e:	8c 93       	st	X, r24
     f50:	6c c0       	rjmp	.+216    	; 0x102a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f52:	a7 e3       	ldi	r26, 0x37	; 55
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e7 e3       	ldi	r30, 0x37	; 55
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_setupPinDirection+0x10c>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_setupPinDirection+0x108>
     f74:	80 95       	com	r24
     f76:	84 23       	and	r24, r20
     f78:	8c 93       	st	X, r24
     f7a:	57 c0       	rjmp	.+174    	; 0x102a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	a1 f4       	brne	.+40     	; 0xfaa <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f82:	a4 e3       	ldi	r26, 0x34	; 52
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e4 e3       	ldi	r30, 0x34	; 52
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_setupPinDirection+0x13c>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_setupPinDirection+0x138>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	40 c0       	rjmp	.+128    	; 0x102a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     faa:	a4 e3       	ldi	r26, 0x34	; 52
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e4 e3       	ldi	r30, 0x34	; 52
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <GPIO_setupPinDirection+0x164>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <GPIO_setupPinDirection+0x160>
     fcc:	80 95       	com	r24
     fce:	84 23       	and	r24, r20
     fd0:	8c 93       	st	X, r24
     fd2:	2b c0       	rjmp	.+86     	; 0x102a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	a1 f4       	brne	.+40     	; 0x1002 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     fda:	a1 e3       	ldi	r26, 0x31	; 49
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e1 e3       	ldi	r30, 0x31	; 49
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <GPIO_setupPinDirection+0x194>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <GPIO_setupPinDirection+0x190>
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	14 c0       	rjmp	.+40     	; 0x102a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1002:	a1 e3       	ldi	r26, 0x31	; 49
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e1 e3       	ldi	r30, 0x31	; 49
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <GPIO_setupPinDirection+0x1bc>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <GPIO_setupPinDirection+0x1b8>
    1024:	80 95       	com	r24
    1026:	84 23       	and	r24, r20
    1028:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <GPIO_writePin+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <GPIO_writePin+0x8>
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02
    104c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	88 30       	cpi	r24, 0x08	; 8
    1052:	08 f0       	brcs	.+2      	; 0x1056 <GPIO_writePin+0x1c>
    1054:	d5 c0       	rjmp	.+426    	; 0x1200 <GPIO_writePin+0x1c6>
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	08 f0       	brcs	.+2      	; 0x105e <GPIO_writePin+0x24>
    105c:	d1 c0       	rjmp	.+418    	; 0x1200 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3d 83       	std	Y+5, r19	; 0x05
    1066:	2c 83       	std	Y+4, r18	; 0x04
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <GPIO_writePin+0x3a>
    1072:	43 c0       	rjmp	.+134    	; 0x10fa <GPIO_writePin+0xc0>
    1074:	2c 81       	ldd	r18, Y+4	; 0x04
    1076:	3d 81       	ldd	r19, Y+5	; 0x05
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	2c f4       	brge	.+10     	; 0x1088 <GPIO_writePin+0x4e>
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	9d 81       	ldd	r25, Y+5	; 0x05
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	71 f0       	breq	.+28     	; 0x10a2 <GPIO_writePin+0x68>
    1086:	bc c0       	rjmp	.+376    	; 0x1200 <GPIO_writePin+0x1c6>
    1088:	2c 81       	ldd	r18, Y+4	; 0x04
    108a:	3d 81       	ldd	r19, Y+5	; 0x05
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <GPIO_writePin+0x5a>
    1092:	5f c0       	rjmp	.+190    	; 0x1152 <GPIO_writePin+0x118>
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <GPIO_writePin+0x66>
    109e:	85 c0       	rjmp	.+266    	; 0x11aa <GPIO_writePin+0x170>
    10a0:	af c0       	rjmp	.+350    	; 0x1200 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	a1 f4       	brne	.+40     	; 0x10d0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    10a8:	ab e3       	ldi	r26, 0x3B	; 59
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	eb e3       	ldi	r30, 0x3B	; 59
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <GPIO_writePin+0x8c>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <GPIO_writePin+0x88>
    10ca:	84 2b       	or	r24, r20
    10cc:	8c 93       	st	X, r24
    10ce:	98 c0       	rjmp	.+304    	; 0x1200 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    10d0:	ab e3       	ldi	r26, 0x3B	; 59
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	eb e3       	ldi	r30, 0x3B	; 59
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <GPIO_writePin+0xb4>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <GPIO_writePin+0xb0>
    10f2:	80 95       	com	r24
    10f4:	84 23       	and	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	83 c0       	rjmp	.+262    	; 0x1200 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	a1 f4       	brne	.+40     	; 0x1128 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1100:	a8 e3       	ldi	r26, 0x38	; 56
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e8 e3       	ldi	r30, 0x38	; 56
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <GPIO_writePin+0xe4>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <GPIO_writePin+0xe0>
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	6c c0       	rjmp	.+216    	; 0x1200 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1128:	a8 e3       	ldi	r26, 0x38	; 56
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <GPIO_writePin+0x10c>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <GPIO_writePin+0x108>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	57 c0       	rjmp	.+174    	; 0x1200 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	a1 f4       	brne	.+40     	; 0x1180 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1158:	a5 e3       	ldi	r26, 0x35	; 53
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e3       	ldi	r30, 0x35	; 53
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <GPIO_writePin+0x13c>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <GPIO_writePin+0x138>
    117a:	84 2b       	or	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	40 c0       	rjmp	.+128    	; 0x1200 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1180:	a5 e3       	ldi	r26, 0x35	; 53
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e5 e3       	ldi	r30, 0x35	; 53
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <GPIO_writePin+0x164>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <GPIO_writePin+0x160>
    11a2:	80 95       	com	r24
    11a4:	84 23       	and	r24, r20
    11a6:	8c 93       	st	X, r24
    11a8:	2b c0       	rjmp	.+86     	; 0x1200 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	a1 f4       	brne	.+40     	; 0x11d8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    11b0:	a2 e3       	ldi	r26, 0x32	; 50
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e2 e3       	ldi	r30, 0x32	; 50
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <GPIO_writePin+0x194>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <GPIO_writePin+0x190>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11d8:	a2 e3       	ldi	r26, 0x32	; 50
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e2 e3       	ldi	r30, 0x32	; 50
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <GPIO_writePin+0x1bc>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <GPIO_writePin+0x1b8>
    11fa:	80 95       	com	r24
    11fc:	84 23       	and	r24, r20
    11fe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <GPIO_readPin+0x6>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <GPIO_readPin+0x8>
    1218:	0f 92       	push	r0
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	8a 83       	std	Y+2, r24	; 0x02
    1220:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1222:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	88 30       	cpi	r24, 0x08	; 8
    1228:	08 f0       	brcs	.+2      	; 0x122c <GPIO_readPin+0x1c>
    122a:	84 c0       	rjmp	.+264    	; 0x1334 <GPIO_readPin+0x124>
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	08 f0       	brcs	.+2      	; 0x1234 <GPIO_readPin+0x24>
    1232:	80 c0       	rjmp	.+256    	; 0x1334 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3d 83       	std	Y+5, r19	; 0x05
    123c:	2c 83       	std	Y+4, r18	; 0x04
    123e:	4c 81       	ldd	r20, Y+4	; 0x04
    1240:	5d 81       	ldd	r21, Y+5	; 0x05
    1242:	41 30       	cpi	r20, 0x01	; 1
    1244:	51 05       	cpc	r21, r1
    1246:	79 f1       	breq	.+94     	; 0x12a6 <GPIO_readPin+0x96>
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	9d 81       	ldd	r25, Y+5	; 0x05
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	91 05       	cpc	r25, r1
    1250:	34 f4       	brge	.+12     	; 0x125e <GPIO_readPin+0x4e>
    1252:	2c 81       	ldd	r18, Y+4	; 0x04
    1254:	3d 81       	ldd	r19, Y+5	; 0x05
    1256:	21 15       	cp	r18, r1
    1258:	31 05       	cpc	r19, r1
    125a:	69 f0       	breq	.+26     	; 0x1276 <GPIO_readPin+0x66>
    125c:	6b c0       	rjmp	.+214    	; 0x1334 <GPIO_readPin+0x124>
    125e:	4c 81       	ldd	r20, Y+4	; 0x04
    1260:	5d 81       	ldd	r21, Y+5	; 0x05
    1262:	42 30       	cpi	r20, 0x02	; 2
    1264:	51 05       	cpc	r21, r1
    1266:	b9 f1       	breq	.+110    	; 0x12d6 <GPIO_readPin+0xc6>
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	9d 81       	ldd	r25, Y+5	; 0x05
    126c:	83 30       	cpi	r24, 0x03	; 3
    126e:	91 05       	cpc	r25, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <GPIO_readPin+0x64>
    1272:	49 c0       	rjmp	.+146    	; 0x1306 <GPIO_readPin+0xf6>
    1274:	5f c0       	rjmp	.+190    	; 0x1334 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1276:	e9 e3       	ldi	r30, 0x39	; 57
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	88 2f       	mov	r24, r24
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a9 01       	movw	r20, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <GPIO_readPin+0x7e>
    128a:	55 95       	asr	r21
    128c:	47 95       	ror	r20
    128e:	8a 95       	dec	r24
    1290:	e2 f7       	brpl	.-8      	; 0x128a <GPIO_readPin+0x7a>
    1292:	ca 01       	movw	r24, r20
    1294:	81 70       	andi	r24, 0x01	; 1
    1296:	90 70       	andi	r25, 0x00	; 0
    1298:	88 23       	and	r24, r24
    129a:	19 f0       	breq	.+6      	; 0x12a2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	49 c0       	rjmp	.+146    	; 0x1334 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12a2:	19 82       	std	Y+1, r1	; 0x01
    12a4:	47 c0       	rjmp	.+142    	; 0x1334 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    12a6:	e6 e3       	ldi	r30, 0x36	; 54
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_readPin+0xae>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_readPin+0xaa>
    12c2:	ca 01       	movw	r24, r20
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	90 70       	andi	r25, 0x00	; 0
    12c8:	88 23       	and	r24, r24
    12ca:	19 f0       	breq	.+6      	; 0x12d2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	31 c0       	rjmp	.+98     	; 0x1334 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12d2:	19 82       	std	Y+1, r1	; 0x01
    12d4:	2f c0       	rjmp	.+94     	; 0x1334 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12d6:	e3 e3       	ldi	r30, 0x33	; 51
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	a9 01       	movw	r20, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_readPin+0xde>
    12ea:	55 95       	asr	r21
    12ec:	47 95       	ror	r20
    12ee:	8a 95       	dec	r24
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_readPin+0xda>
    12f2:	ca 01       	movw	r24, r20
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	90 70       	andi	r25, 0x00	; 0
    12f8:	88 23       	and	r24, r24
    12fa:	19 f0       	breq	.+6      	; 0x1302 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	19 c0       	rjmp	.+50     	; 0x1334 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1302:	19 82       	std	Y+1, r1	; 0x01
    1304:	17 c0       	rjmp	.+46     	; 0x1334 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1306:	e0 e3       	ldi	r30, 0x30	; 48
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	a9 01       	movw	r20, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <GPIO_readPin+0x10e>
    131a:	55 95       	asr	r21
    131c:	47 95       	ror	r20
    131e:	8a 95       	dec	r24
    1320:	e2 f7       	brpl	.-8      	; 0x131a <GPIO_readPin+0x10a>
    1322:	ca 01       	movw	r24, r20
    1324:	81 70       	andi	r24, 0x01	; 1
    1326:	90 70       	andi	r25, 0x00	; 0
    1328:	88 23       	and	r24, r24
    132a:	19 f0       	breq	.+6      	; 0x1332 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1332:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1334:	89 81       	ldd	r24, Y+1	; 0x01
}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <GPIO_setupPortDirection+0x6>
    134c:	00 d0       	rcall	.+0      	; 0x134e <GPIO_setupPortDirection+0x8>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	90 f5       	brcc	.+100    	; 0x13c0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	3c 83       	std	Y+4, r19	; 0x04
    1364:	2b 83       	std	Y+3, r18	; 0x03
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	91 05       	cpc	r25, r1
    136e:	d1 f0       	breq	.+52     	; 0x13a4 <GPIO_setupPortDirection+0x5e>
    1370:	2b 81       	ldd	r18, Y+3	; 0x03
    1372:	3c 81       	ldd	r19, Y+4	; 0x04
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	2c f4       	brge	.+10     	; 0x1384 <GPIO_setupPortDirection+0x3e>
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	61 f0       	breq	.+24     	; 0x139a <GPIO_setupPortDirection+0x54>
    1382:	1e c0       	rjmp	.+60     	; 0x13c0 <GPIO_setupPortDirection+0x7a>
    1384:	2b 81       	ldd	r18, Y+3	; 0x03
    1386:	3c 81       	ldd	r19, Y+4	; 0x04
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	81 f0       	breq	.+32     	; 0x13ae <GPIO_setupPortDirection+0x68>
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	83 30       	cpi	r24, 0x03	; 3
    1394:	91 05       	cpc	r25, r1
    1396:	81 f0       	breq	.+32     	; 0x13b8 <GPIO_setupPortDirection+0x72>
    1398:	13 c0       	rjmp	.+38     	; 0x13c0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    139a:	ea e3       	ldi	r30, 0x3A	; 58
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	80 83       	st	Z, r24
    13a2:	0e c0       	rjmp	.+28     	; 0x13c0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    13a4:	e7 e3       	ldi	r30, 0x37	; 55
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	80 83       	st	Z, r24
    13ac:	09 c0       	rjmp	.+18     	; 0x13c0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    13ae:	e4 e3       	ldi	r30, 0x34	; 52
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	80 83       	st	Z, r24
    13b6:	04 c0       	rjmp	.+8      	; 0x13c0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    13b8:	e1 e3       	ldi	r30, 0x31	; 49
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	80 83       	st	Z, r24
			break;
		}
	}
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <GPIO_writePort+0x6>
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <GPIO_writePort+0x8>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	89 83       	std	Y+1, r24	; 0x01
    13dc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	84 30       	cpi	r24, 0x04	; 4
    13e2:	90 f5       	brcc	.+100    	; 0x1448 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	3c 83       	std	Y+4, r19	; 0x04
    13ec:	2b 83       	std	Y+3, r18	; 0x03
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	91 05       	cpc	r25, r1
    13f6:	d1 f0       	breq	.+52     	; 0x142c <GPIO_writePort+0x5e>
    13f8:	2b 81       	ldd	r18, Y+3	; 0x03
    13fa:	3c 81       	ldd	r19, Y+4	; 0x04
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	2c f4       	brge	.+10     	; 0x140c <GPIO_writePort+0x3e>
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	61 f0       	breq	.+24     	; 0x1422 <GPIO_writePort+0x54>
    140a:	1e c0       	rjmp	.+60     	; 0x1448 <GPIO_writePort+0x7a>
    140c:	2b 81       	ldd	r18, Y+3	; 0x03
    140e:	3c 81       	ldd	r19, Y+4	; 0x04
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	81 f0       	breq	.+32     	; 0x1436 <GPIO_writePort+0x68>
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	91 05       	cpc	r25, r1
    141e:	81 f0       	breq	.+32     	; 0x1440 <GPIO_writePort+0x72>
    1420:	13 c0       	rjmp	.+38     	; 0x1448 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1422:	eb e3       	ldi	r30, 0x3B	; 59
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	80 83       	st	Z, r24
    142a:	0e c0       	rjmp	.+28     	; 0x1448 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    142c:	e8 e3       	ldi	r30, 0x38	; 56
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	80 83       	st	Z, r24
    1434:	09 c0       	rjmp	.+18     	; 0x1448 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1436:	e5 e3       	ldi	r30, 0x35	; 53
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	80 83       	st	Z, r24
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1440:	e2 e3       	ldi	r30, 0x32	; 50
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	80 83       	st	Z, r24
			break;
		}
	}
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	00 d0       	rcall	.+0      	; 0x145c <GPIO_readPort+0x6>
    145c:	00 d0       	rcall	.+0      	; 0x145e <GPIO_readPort+0x8>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1464:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	90 f5       	brcc	.+100    	; 0x14d0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3c 83       	std	Y+4, r19	; 0x04
    1474:	2b 83       	std	Y+3, r18	; 0x03
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	d1 f0       	breq	.+52     	; 0x14b4 <GPIO_readPort+0x5e>
    1480:	2b 81       	ldd	r18, Y+3	; 0x03
    1482:	3c 81       	ldd	r19, Y+4	; 0x04
    1484:	22 30       	cpi	r18, 0x02	; 2
    1486:	31 05       	cpc	r19, r1
    1488:	2c f4       	brge	.+10     	; 0x1494 <GPIO_readPort+0x3e>
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	61 f0       	breq	.+24     	; 0x14aa <GPIO_readPort+0x54>
    1492:	1e c0       	rjmp	.+60     	; 0x14d0 <GPIO_readPort+0x7a>
    1494:	2b 81       	ldd	r18, Y+3	; 0x03
    1496:	3c 81       	ldd	r19, Y+4	; 0x04
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	81 f0       	breq	.+32     	; 0x14be <GPIO_readPort+0x68>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	81 f0       	breq	.+32     	; 0x14c8 <GPIO_readPort+0x72>
    14a8:	13 c0       	rjmp	.+38     	; 0x14d0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    14aa:	e9 e3       	ldi	r30, 0x39	; 57
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	0e c0       	rjmp	.+28     	; 0x14d0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    14b4:	e6 e3       	ldi	r30, 0x36	; 54
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	09 c0       	rjmp	.+18     	; 0x14d0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    14be:	e3 e3       	ldi	r30, 0x33	; 51
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	04 c0       	rjmp	.+8      	; 0x14d0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14c8:	e0 e3       	ldi	r30, 0x30	; 48
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <Ultrasonic_init>:
#include "ultrasonic.h"

uint8 g_edgeCount = 0;  // counter use in Edge Processing
uint16 g_timeHigh = 0;  // period from first Rising and FiSrst Falling

void Ultrasonic_init(void) {
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <Ultrasonic_init+0x6>
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	ICU_ConfigType UltraSoinc = { F_CPU_8, RAISING };
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	8a 83       	std	Y+2, r24	; 0x02
	GPIO_setupPinDirection(PORT_TRIGGER, PIN_TRIGGER, PIN_OUTPUT); // Set the direction for the trigger pin as output
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	67 e0       	ldi	r22, 0x07	; 7
    14f6:	41 e0       	ldi	r20, 0x01	; 1
    14f8:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	ICU_init(&UltraSoinc);    // Initialize the ICU driver
    14fc:	ce 01       	movw	r24, r28
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	0e 94 82 06 	call	0xd04	; 0xd04 <ICU_init>
	ICU_setCallBack(Ultrasonic_edgeProcessing);  //Set up the ICU callback function.
    1504:	8b e2       	ldi	r24, 0x2B	; 43
    1506:	9d e0       	ldi	r25, 0x0D	; 13
    1508:	0e 94 cb 06 	call	0xd96	; 0xd96 <ICU_setCallBack>

}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <Ultrasonic_Trigger>:
// to generate trigger signal
void Ultrasonic_Trigger(void) {
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	c8 54       	subi	r28, 0x48	; 72
    1524:	d0 40       	sbci	r29, 0x00	; 0
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(PORT_TRIGGER, PIN_TRIGGER, LOGIC_LOW);
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	67 e0       	ldi	r22, 0x07	; 7
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    153a:	fe 01       	movw	r30, r28
    153c:	eb 5b       	subi	r30, 0xBB	; 187
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 e2       	ldi	r26, 0x20	; 32
    1546:	b1 e4       	ldi	r27, 0x41	; 65
    1548:	80 83       	st	Z, r24
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	a2 83       	std	Z+2, r26	; 0x02
    154e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1550:	8e 01       	movw	r16, r28
    1552:	0f 5b       	subi	r16, 0xBF	; 191
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
    1556:	fe 01       	movw	r30, r28
    1558:	eb 5b       	subi	r30, 0xBB	; 187
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	60 81       	ld	r22, Z
    155e:	71 81       	ldd	r23, Z+1	; 0x01
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	2b ea       	ldi	r18, 0xAB	; 171
    1566:	3a ea       	ldi	r19, 0xAA	; 170
    1568:	4a ea       	ldi	r20, 0xAA	; 170
    156a:	50 e4       	ldi	r21, 0x40	; 64
    156c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	f8 01       	movw	r30, r16
    1576:	80 83       	st	Z, r24
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	a2 83       	std	Z+2, r26	; 0x02
    157c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    157e:	fe 01       	movw	r30, r28
    1580:	ef 5b       	subi	r30, 0xBF	; 191
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	60 81       	ld	r22, Z
    1586:	71 81       	ldd	r23, Z+1	; 0x01
    1588:	82 81       	ldd	r24, Z+2	; 0x02
    158a:	93 81       	ldd	r25, Z+3	; 0x03
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e8       	ldi	r20, 0x80	; 128
    1592:	5f e3       	ldi	r21, 0x3F	; 63
    1594:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1598:	88 23       	and	r24, r24
    159a:	34 f4       	brge	.+12     	; 0x15a8 <Ultrasonic_Trigger+0x92>
		__ticks = 1;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	fe 01       	movw	r30, r28
    15a0:	e0 5c       	subi	r30, 0xC0	; 192
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	80 83       	st	Z, r24
    15a6:	9d c0       	rjmp	.+314    	; 0x16e2 <Ultrasonic_Trigger+0x1cc>
	else if (__tmp > 255)
    15a8:	fe 01       	movw	r30, r28
    15aa:	ef 5b       	subi	r30, 0xBF	; 191
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	60 81       	ld	r22, Z
    15b0:	71 81       	ldd	r23, Z+1	; 0x01
    15b2:	82 81       	ldd	r24, Z+2	; 0x02
    15b4:	93 81       	ldd	r25, Z+3	; 0x03
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	4f e7       	ldi	r20, 0x7F	; 127
    15bc:	53 e4       	ldi	r21, 0x43	; 67
    15be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15c2:	18 16       	cp	r1, r24
    15c4:	0c f0       	brlt	.+2      	; 0x15c8 <Ultrasonic_Trigger+0xb2>
    15c6:	7e c0       	rjmp	.+252    	; 0x16c4 <Ultrasonic_Trigger+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    15c8:	fe 01       	movw	r30, r28
    15ca:	eb 5b       	subi	r30, 0xBB	; 187
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	60 81       	ld	r22, Z
    15d0:	71 81       	ldd	r23, Z+1	; 0x01
    15d2:	82 81       	ldd	r24, Z+2	; 0x02
    15d4:	93 81       	ldd	r25, Z+3	; 0x03
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	4a e7       	ldi	r20, 0x7A	; 122
    15dc:	54 e4       	ldi	r21, 0x44	; 68
    15de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	8c af       	std	Y+60, r24	; 0x3c
    15e8:	9d af       	std	Y+61, r25	; 0x3d
    15ea:	ae af       	std	Y+62, r26	; 0x3e
    15ec:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ee:	6c ad       	ldd	r22, Y+60	; 0x3c
    15f0:	7d ad       	ldd	r23, Y+61	; 0x3d
    15f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    15f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	4a e7       	ldi	r20, 0x7A	; 122
    15fc:	55 e4       	ldi	r21, 0x45	; 69
    15fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	88 af       	std	Y+56, r24	; 0x38
    1608:	99 af       	std	Y+57, r25	; 0x39
    160a:	aa af       	std	Y+58, r26	; 0x3a
    160c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    160e:	68 ad       	ldd	r22, Y+56	; 0x38
    1610:	79 ad       	ldd	r23, Y+57	; 0x39
    1612:	8a ad       	ldd	r24, Y+58	; 0x3a
    1614:	9b ad       	ldd	r25, Y+59	; 0x3b
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e8       	ldi	r20, 0x80	; 128
    161c:	5f e3       	ldi	r21, 0x3F	; 63
    161e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1622:	88 23       	and	r24, r24
    1624:	2c f4       	brge	.+10     	; 0x1630 <Ultrasonic_Trigger+0x11a>
		__ticks = 1;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	9f ab       	std	Y+55, r25	; 0x37
    162c:	8e ab       	std	Y+54, r24	; 0x36
    162e:	3f c0       	rjmp	.+126    	; 0x16ae <Ultrasonic_Trigger+0x198>
	else if (__tmp > 65535)
    1630:	68 ad       	ldd	r22, Y+56	; 0x38
    1632:	79 ad       	ldd	r23, Y+57	; 0x39
    1634:	8a ad       	ldd	r24, Y+58	; 0x3a
    1636:	9b ad       	ldd	r25, Y+59	; 0x3b
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	3f ef       	ldi	r19, 0xFF	; 255
    163c:	4f e7       	ldi	r20, 0x7F	; 127
    163e:	57 e4       	ldi	r21, 0x47	; 71
    1640:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1644:	18 16       	cp	r1, r24
    1646:	4c f5       	brge	.+82     	; 0x169a <Ultrasonic_Trigger+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1648:	6c ad       	ldd	r22, Y+60	; 0x3c
    164a:	7d ad       	ldd	r23, Y+61	; 0x3d
    164c:	8e ad       	ldd	r24, Y+62	; 0x3e
    164e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e2       	ldi	r20, 0x20	; 32
    1656:	51 e4       	ldi	r21, 0x41	; 65
    1658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	9f ab       	std	Y+55, r25	; 0x37
    166e:	8e ab       	std	Y+54, r24	; 0x36
    1670:	0f c0       	rjmp	.+30     	; 0x1690 <Ultrasonic_Trigger+0x17a>
    1672:	80 e9       	ldi	r24, 0x90	; 144
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	9d ab       	std	Y+53, r25	; 0x35
    1678:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    167a:	8c a9       	ldd	r24, Y+52	; 0x34
    167c:	9d a9       	ldd	r25, Y+53	; 0x35
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <Ultrasonic_Trigger+0x168>
    1682:	9d ab       	std	Y+53, r25	; 0x35
    1684:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1686:	8e a9       	ldd	r24, Y+54	; 0x36
    1688:	9f a9       	ldd	r25, Y+55	; 0x37
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	9f ab       	std	Y+55, r25	; 0x37
    168e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1690:	8e a9       	ldd	r24, Y+54	; 0x36
    1692:	9f a9       	ldd	r25, Y+55	; 0x37
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	69 f7       	brne	.-38     	; 0x1672 <Ultrasonic_Trigger+0x15c>
    1698:	2d c0       	rjmp	.+90     	; 0x16f4 <Ultrasonic_Trigger+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169a:	68 ad       	ldd	r22, Y+56	; 0x38
    169c:	79 ad       	ldd	r23, Y+57	; 0x39
    169e:	8a ad       	ldd	r24, Y+58	; 0x3a
    16a0:	9b ad       	ldd	r25, Y+59	; 0x3b
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9f ab       	std	Y+55, r25	; 0x37
    16ac:	8e ab       	std	Y+54, r24	; 0x36
    16ae:	8e a9       	ldd	r24, Y+54	; 0x36
    16b0:	9f a9       	ldd	r25, Y+55	; 0x37
    16b2:	9b ab       	std	Y+51, r25	; 0x33
    16b4:	8a ab       	std	Y+50, r24	; 0x32
    16b6:	8a a9       	ldd	r24, Y+50	; 0x32
    16b8:	9b a9       	ldd	r25, Y+51	; 0x33
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <Ultrasonic_Trigger+0x1a4>
    16be:	9b ab       	std	Y+51, r25	; 0x33
    16c0:	8a ab       	std	Y+50, r24	; 0x32
    16c2:	18 c0       	rjmp	.+48     	; 0x16f4 <Ultrasonic_Trigger+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    16c4:	fe 01       	movw	r30, r28
    16c6:	ef 5b       	subi	r30, 0xBF	; 191
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	60 81       	ld	r22, Z
    16cc:	71 81       	ldd	r23, Z+1	; 0x01
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	fe 01       	movw	r30, r28
    16dc:	e0 5c       	subi	r30, 0xC0	; 192
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 83       	st	Z, r24
    16e2:	fe 01       	movw	r30, r28
    16e4:	e0 5c       	subi	r30, 0xC0	; 192
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16ec:	89 a9       	ldd	r24, Y+49	; 0x31
    16ee:	8a 95       	dec	r24
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <Ultrasonic_Trigger+0x1d8>
    16f2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(10);
	GPIO_writePin(PORT_TRIGGER, PIN_TRIGGER, LOGIC_HIGH);
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	67 e0       	ldi	r22, 0x07	; 7
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e2       	ldi	r26, 0x20	; 32
    1704:	b1 e4       	ldi	r27, 0x41	; 65
    1706:	8d a7       	std	Y+45, r24	; 0x2d
    1708:	9e a7       	std	Y+46, r25	; 0x2e
    170a:	af a7       	std	Y+47, r26	; 0x2f
    170c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    170e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1710:	7e a5       	ldd	r23, Y+46	; 0x2e
    1712:	8f a5       	ldd	r24, Y+47	; 0x2f
    1714:	98 a9       	ldd	r25, Y+48	; 0x30
    1716:	2b ea       	ldi	r18, 0xAB	; 171
    1718:	3a ea       	ldi	r19, 0xAA	; 170
    171a:	4a ea       	ldi	r20, 0xAA	; 170
    171c:	50 e4       	ldi	r21, 0x40	; 64
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	89 a7       	std	Y+41, r24	; 0x29
    1728:	9a a7       	std	Y+42, r25	; 0x2a
    172a:	ab a7       	std	Y+43, r26	; 0x2b
    172c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    172e:	69 a5       	ldd	r22, Y+41	; 0x29
    1730:	7a a5       	ldd	r23, Y+42	; 0x2a
    1732:	8b a5       	ldd	r24, Y+43	; 0x2b
    1734:	9c a5       	ldd	r25, Y+44	; 0x2c
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	1c f4       	brge	.+6      	; 0x174c <Ultrasonic_Trigger+0x236>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	88 a7       	std	Y+40, r24	; 0x28
    174a:	91 c0       	rjmp	.+290    	; 0x186e <Ultrasonic_Trigger+0x358>
	else if (__tmp > 255)
    174c:	69 a5       	ldd	r22, Y+41	; 0x29
    174e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1750:	8b a5       	ldd	r24, Y+43	; 0x2b
    1752:	9c a5       	ldd	r25, Y+44	; 0x2c
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	53 e4       	ldi	r21, 0x43	; 67
    175c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	0c f0       	brlt	.+2      	; 0x1766 <Ultrasonic_Trigger+0x250>
    1764:	7b c0       	rjmp	.+246    	; 0x185c <Ultrasonic_Trigger+0x346>
	{
		_delay_ms(__us / 1000.0);
    1766:	6d a5       	ldd	r22, Y+45	; 0x2d
    1768:	7e a5       	ldd	r23, Y+46	; 0x2e
    176a:	8f a5       	ldd	r24, Y+47	; 0x2f
    176c:	98 a9       	ldd	r25, Y+48	; 0x30
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	4a e7       	ldi	r20, 0x7A	; 122
    1774:	54 e4       	ldi	r21, 0x44	; 68
    1776:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	8c a3       	std	Y+36, r24	; 0x24
    1780:	9d a3       	std	Y+37, r25	; 0x25
    1782:	ae a3       	std	Y+38, r26	; 0x26
    1784:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1786:	6c a1       	ldd	r22, Y+36	; 0x24
    1788:	7d a1       	ldd	r23, Y+37	; 0x25
    178a:	8e a1       	ldd	r24, Y+38	; 0x26
    178c:	9f a1       	ldd	r25, Y+39	; 0x27
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4a e7       	ldi	r20, 0x7A	; 122
    1794:	55 e4       	ldi	r21, 0x45	; 69
    1796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	88 a3       	std	Y+32, r24	; 0x20
    17a0:	99 a3       	std	Y+33, r25	; 0x21
    17a2:	aa a3       	std	Y+34, r26	; 0x22
    17a4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    17a6:	68 a1       	ldd	r22, Y+32	; 0x20
    17a8:	79 a1       	ldd	r23, Y+33	; 0x21
    17aa:	8a a1       	ldd	r24, Y+34	; 0x22
    17ac:	9b a1       	ldd	r25, Y+35	; 0x23
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ba:	88 23       	and	r24, r24
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <Ultrasonic_Trigger+0x2b2>
		__ticks = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9f 8f       	std	Y+31, r25	; 0x1f
    17c4:	8e 8f       	std	Y+30, r24	; 0x1e
    17c6:	3f c0       	rjmp	.+126    	; 0x1846 <Ultrasonic_Trigger+0x330>
	else if (__tmp > 65535)
    17c8:	68 a1       	ldd	r22, Y+32	; 0x20
    17ca:	79 a1       	ldd	r23, Y+33	; 0x21
    17cc:	8a a1       	ldd	r24, Y+34	; 0x22
    17ce:	9b a1       	ldd	r25, Y+35	; 0x23
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	3f ef       	ldi	r19, 0xFF	; 255
    17d4:	4f e7       	ldi	r20, 0x7F	; 127
    17d6:	57 e4       	ldi	r21, 0x47	; 71
    17d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17dc:	18 16       	cp	r1, r24
    17de:	4c f5       	brge	.+82     	; 0x1832 <Ultrasonic_Trigger+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	6c a1       	ldd	r22, Y+36	; 0x24
    17e2:	7d a1       	ldd	r23, Y+37	; 0x25
    17e4:	8e a1       	ldd	r24, Y+38	; 0x26
    17e6:	9f a1       	ldd	r25, Y+39	; 0x27
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e2       	ldi	r20, 0x20	; 32
    17ee:	51 e4       	ldi	r21, 0x41	; 65
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	9f 8f       	std	Y+31, r25	; 0x1f
    1806:	8e 8f       	std	Y+30, r24	; 0x1e
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <Ultrasonic_Trigger+0x312>
    180a:	80 e9       	ldi	r24, 0x90	; 144
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	9d 8f       	std	Y+29, r25	; 0x1d
    1810:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1812:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1814:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <Ultrasonic_Trigger+0x300>
    181a:	9d 8f       	std	Y+29, r25	; 0x1d
    181c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1820:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	9f 8f       	std	Y+31, r25	; 0x1f
    1826:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1828:	8e 8d       	ldd	r24, Y+30	; 0x1e
    182a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	69 f7       	brne	.-38     	; 0x180a <Ultrasonic_Trigger+0x2f4>
    1830:	24 c0       	rjmp	.+72     	; 0x187a <Ultrasonic_Trigger+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1832:	68 a1       	ldd	r22, Y+32	; 0x20
    1834:	79 a1       	ldd	r23, Y+33	; 0x21
    1836:	8a a1       	ldd	r24, Y+34	; 0x22
    1838:	9b a1       	ldd	r25, Y+35	; 0x23
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9f 8f       	std	Y+31, r25	; 0x1f
    1844:	8e 8f       	std	Y+30, r24	; 0x1e
    1846:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1848:	9f 8d       	ldd	r25, Y+31	; 0x1f
    184a:	9b 8f       	std	Y+27, r25	; 0x1b
    184c:	8a 8f       	std	Y+26, r24	; 0x1a
    184e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1850:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <Ultrasonic_Trigger+0x33c>
    1856:	9b 8f       	std	Y+27, r25	; 0x1b
    1858:	8a 8f       	std	Y+26, r24	; 0x1a
    185a:	0f c0       	rjmp	.+30     	; 0x187a <Ultrasonic_Trigger+0x364>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    185c:	69 a5       	ldd	r22, Y+41	; 0x29
    185e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1860:	8b a5       	ldd	r24, Y+43	; 0x2b
    1862:	9c a5       	ldd	r25, Y+44	; 0x2c
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	88 a7       	std	Y+40, r24	; 0x28
    186e:	88 a5       	ldd	r24, Y+40	; 0x28
    1870:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1872:	89 8d       	ldd	r24, Y+25	; 0x19
    1874:	8a 95       	dec	r24
    1876:	f1 f7       	brne	.-4      	; 0x1874 <Ultrasonic_Trigger+0x35e>
    1878:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	GPIO_writePin(PORT_TRIGGER, PIN_TRIGGER, LOGIC_LOW);
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	67 e0       	ldi	r22, 0x07	; 7
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e2       	ldi	r26, 0x20	; 32
    188a:	b1 e4       	ldi	r27, 0x41	; 65
    188c:	8d 8b       	std	Y+21, r24	; 0x15
    188e:	9e 8b       	std	Y+22, r25	; 0x16
    1890:	af 8b       	std	Y+23, r26	; 0x17
    1892:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1894:	6d 89       	ldd	r22, Y+21	; 0x15
    1896:	7e 89       	ldd	r23, Y+22	; 0x16
    1898:	8f 89       	ldd	r24, Y+23	; 0x17
    189a:	98 8d       	ldd	r25, Y+24	; 0x18
    189c:	2b ea       	ldi	r18, 0xAB	; 171
    189e:	3a ea       	ldi	r19, 0xAA	; 170
    18a0:	4a ea       	ldi	r20, 0xAA	; 170
    18a2:	50 e4       	ldi	r21, 0x40	; 64
    18a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	89 8b       	std	Y+17, r24	; 0x11
    18ae:	9a 8b       	std	Y+18, r25	; 0x12
    18b0:	ab 8b       	std	Y+19, r26	; 0x13
    18b2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    18b4:	69 89       	ldd	r22, Y+17	; 0x11
    18b6:	7a 89       	ldd	r23, Y+18	; 0x12
    18b8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ba:	9c 89       	ldd	r25, Y+20	; 0x14
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e8       	ldi	r20, 0x80	; 128
    18c2:	5f e3       	ldi	r21, 0x3F	; 63
    18c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	1c f4       	brge	.+6      	; 0x18d2 <Ultrasonic_Trigger+0x3bc>
		__ticks = 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	88 8b       	std	Y+16, r24	; 0x10
    18d0:	91 c0       	rjmp	.+290    	; 0x19f4 <Ultrasonic_Trigger+0x4de>
	else if (__tmp > 255)
    18d2:	69 89       	ldd	r22, Y+17	; 0x11
    18d4:	7a 89       	ldd	r23, Y+18	; 0x12
    18d6:	8b 89       	ldd	r24, Y+19	; 0x13
    18d8:	9c 89       	ldd	r25, Y+20	; 0x14
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4f e7       	ldi	r20, 0x7F	; 127
    18e0:	53 e4       	ldi	r21, 0x43	; 67
    18e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e6:	18 16       	cp	r1, r24
    18e8:	0c f0       	brlt	.+2      	; 0x18ec <Ultrasonic_Trigger+0x3d6>
    18ea:	7b c0       	rjmp	.+246    	; 0x19e2 <Ultrasonic_Trigger+0x4cc>
	{
		_delay_ms(__us / 1000.0);
    18ec:	6d 89       	ldd	r22, Y+21	; 0x15
    18ee:	7e 89       	ldd	r23, Y+22	; 0x16
    18f0:	8f 89       	ldd	r24, Y+23	; 0x17
    18f2:	98 8d       	ldd	r25, Y+24	; 0x18
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	4a e7       	ldi	r20, 0x7A	; 122
    18fa:	54 e4       	ldi	r21, 0x44	; 68
    18fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	8c 87       	std	Y+12, r24	; 0x0c
    1906:	9d 87       	std	Y+13, r25	; 0x0d
    1908:	ae 87       	std	Y+14, r26	; 0x0e
    190a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190c:	6c 85       	ldd	r22, Y+12	; 0x0c
    190e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1910:	8e 85       	ldd	r24, Y+14	; 0x0e
    1912:	9f 85       	ldd	r25, Y+15	; 0x0f
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a e7       	ldi	r20, 0x7A	; 122
    191a:	55 e4       	ldi	r21, 0x45	; 69
    191c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	88 87       	std	Y+8, r24	; 0x08
    1926:	99 87       	std	Y+9, r25	; 0x09
    1928:	aa 87       	std	Y+10, r26	; 0x0a
    192a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    192c:	68 85       	ldd	r22, Y+8	; 0x08
    192e:	79 85       	ldd	r23, Y+9	; 0x09
    1930:	8a 85       	ldd	r24, Y+10	; 0x0a
    1932:	9b 85       	ldd	r25, Y+11	; 0x0b
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e8       	ldi	r20, 0x80	; 128
    193a:	5f e3       	ldi	r21, 0x3F	; 63
    193c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1940:	88 23       	and	r24, r24
    1942:	2c f4       	brge	.+10     	; 0x194e <Ultrasonic_Trigger+0x438>
		__ticks = 1;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9f 83       	std	Y+7, r25	; 0x07
    194a:	8e 83       	std	Y+6, r24	; 0x06
    194c:	3f c0       	rjmp	.+126    	; 0x19cc <Ultrasonic_Trigger+0x4b6>
	else if (__tmp > 65535)
    194e:	68 85       	ldd	r22, Y+8	; 0x08
    1950:	79 85       	ldd	r23, Y+9	; 0x09
    1952:	8a 85       	ldd	r24, Y+10	; 0x0a
    1954:	9b 85       	ldd	r25, Y+11	; 0x0b
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	4c f5       	brge	.+82     	; 0x19b8 <Ultrasonic_Trigger+0x4a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1966:	6c 85       	ldd	r22, Y+12	; 0x0c
    1968:	7d 85       	ldd	r23, Y+13	; 0x0d
    196a:	8e 85       	ldd	r24, Y+14	; 0x0e
    196c:	9f 85       	ldd	r25, Y+15	; 0x0f
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	9f 83       	std	Y+7, r25	; 0x07
    198c:	8e 83       	std	Y+6, r24	; 0x06
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <Ultrasonic_Trigger+0x498>
    1990:	80 e9       	ldi	r24, 0x90	; 144
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	9d 83       	std	Y+5, r25	; 0x05
    1996:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	9d 81       	ldd	r25, Y+5	; 0x05
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <Ultrasonic_Trigger+0x486>
    19a0:	9d 83       	std	Y+5, r25	; 0x05
    19a2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a4:	8e 81       	ldd	r24, Y+6	; 0x06
    19a6:	9f 81       	ldd	r25, Y+7	; 0x07
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	9f 83       	std	Y+7, r25	; 0x07
    19ac:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ae:	8e 81       	ldd	r24, Y+6	; 0x06
    19b0:	9f 81       	ldd	r25, Y+7	; 0x07
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	69 f7       	brne	.-38     	; 0x1990 <Ultrasonic_Trigger+0x47a>
    19b6:	24 c0       	rjmp	.+72     	; 0x1a00 <Ultrasonic_Trigger+0x4ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	68 85       	ldd	r22, Y+8	; 0x08
    19ba:	79 85       	ldd	r23, Y+9	; 0x09
    19bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19be:	9b 85       	ldd	r25, Y+11	; 0x0b
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9f 83       	std	Y+7, r25	; 0x07
    19ca:	8e 83       	std	Y+6, r24	; 0x06
    19cc:	8e 81       	ldd	r24, Y+6	; 0x06
    19ce:	9f 81       	ldd	r25, Y+7	; 0x07
    19d0:	9b 83       	std	Y+3, r25	; 0x03
    19d2:	8a 83       	std	Y+2, r24	; 0x02
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	9b 81       	ldd	r25, Y+3	; 0x03
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <Ultrasonic_Trigger+0x4c2>
    19dc:	9b 83       	std	Y+3, r25	; 0x03
    19de:	8a 83       	std	Y+2, r24	; 0x02
    19e0:	0f c0       	rjmp	.+30     	; 0x1a00 <Ultrasonic_Trigger+0x4ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19e2:	69 89       	ldd	r22, Y+17	; 0x11
    19e4:	7a 89       	ldd	r23, Y+18	; 0x12
    19e6:	8b 89       	ldd	r24, Y+19	; 0x13
    19e8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	88 8b       	std	Y+16, r24	; 0x10
    19f4:	88 89       	ldd	r24, Y+16	; 0x10
    19f6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	8a 95       	dec	r24
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <Ultrasonic_Trigger+0x4e4>
    19fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);

}
    1a00:	c8 5b       	subi	r28, 0xB8	; 184
    1a02:	df 4f       	sbci	r29, 0xFF	; 255
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <Ultrasonic_readDistance>:

uint8 Ultrasonic_readDistance(void) {
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <Ultrasonic_readDistance+0x6>
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
	uint16 Distance = 0 ;
    1a22:	1a 82       	std	Y+2, r1	; 0x02
    1a24:	19 82       	std	Y+1, r1	; 0x01
	Ultrasonic_Trigger(); // Send the trigger pulse by using the Ultrasonic_Trigger function.
    1a26:	0e 94 8b 0a 	call	0x1516	; 0x1516 <Ultrasonic_Trigger>
	Ultrasonic_edgeProcessing(); //Start the measurement process to Calculate the period of the reflected signal.
    1a2a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Ultrasonic_edgeProcessing>
	Distance = ((uint8) ((uint16)g_timeHigh / 118)) ;
    1a2e:	80 91 a5 00 	lds	r24, 0x00A5
    1a32:	90 91 a6 00 	lds	r25, 0x00A6
    1a36:	26 e7       	ldi	r18, 0x76	; 118
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	0e 94 a6 1b 	call	0x374c	; 0x374c <__udivmodhi4>
    1a40:	cb 01       	movw	r24, r22
    1a42:	88 2f       	mov	r24, r24
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
	return Distance ;
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void) {
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	/* This is the call-back function */

	g_edgeCount++;
    1a5e:	80 91 a4 00 	lds	r24, 0x00A4
    1a62:	8f 5f       	subi	r24, 0xFF	; 255
    1a64:	80 93 a4 00 	sts	0x00A4, r24
	if (g_edgeCount == 1) {
    1a68:	80 91 a4 00 	lds	r24, 0x00A4
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	31 f4       	brne	.+12     	; 0x1a7c <Ultrasonic_edgeProcessing+0x26>
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    1a70:	0e 94 07 07 	call	0xe0e	; 0xe0e <ICU_clearTimerValue>
		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	0e 94 dd 06 	call	0xdba	; 0xdba <ICU_setEdgeDetectionType>
    1a7a:	11 c0       	rjmp	.+34     	; 0x1a9e <Ultrasonic_edgeProcessing+0x48>
	} else if (g_edgeCount == 2) {
    1a7c:	80 91 a4 00 	lds	r24, 0x00A4
    1a80:	82 30       	cpi	r24, 0x02	; 2
    1a82:	69 f4       	brne	.+26     	; 0x1a9e <Ultrasonic_edgeProcessing+0x48>
		/* Store the High time value */
		g_timeHigh = ICU_getInputCaptureValue();
    1a84:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <ICU_getInputCaptureValue>
    1a88:	90 93 a6 00 	sts	0x00A6, r25
    1a8c:	80 93 a5 00 	sts	0x00A5, r24
		/* Detect rising edge */
		ICU_setEdgeDetectionType(RAISING);
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	0e 94 dd 06 	call	0xdba	; 0xdba <ICU_setEdgeDetectionType>
		ICU_clearTimerValue();
    1a96:	0e 94 07 07 	call	0xe0e	; 0xe0e <ICU_clearTimerValue>
		g_edgeCount = 0 ;
    1a9a:	10 92 a4 00 	sts	0x00A4, r1

	}

}
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <LEDS_Init>:
 *      Author: Mahmoud Ashraf
 */

#include "../../HAL/LED/led.h"

void LEDS_Init(void){
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
	/*set the direction*/
	GPIO_setupPinDirection(LED_PORT,LED1_PIN,PIN_OUTPUT);  /*RED*/
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT,LED2_PIN,PIN_OUTPUT);  /*Green*/
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	61 e0       	ldi	r22, 0x01	; 1
    1aba:	41 e0       	ldi	r20, 0x01	; 1
    1abc:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT,LED3_PIN,PIN_OUTPUT);  /*Blue*/
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	62 e0       	ldi	r22, 0x02	; 2
    1ac4:	41 e0       	ldi	r20, 0x01	; 1
    1ac6:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	/*set the initial configuration*/
#ifdef POSTIVE_CONNECTTION
	GPIO_writePin(LED_PORT,LED1_PIN,LOGIC_LOW);
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LED_PORT,LED2_PIN,LOGIC_LOW);
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	61 e0       	ldi	r22, 0x01	; 1
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LED_PORT,LED3_PIN,LOGIC_LOW);
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	62 e0       	ldi	r22, 0x02	; 2
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LED_PORT,LED1_PIN,LOGIC_HIGH);
	GPIO_writePin(LED_PORT,LED2_PIN,LOGIC_HIGH);
	GPIO_writePin(LED_PORT,LED3_PIN,LOGIC_HIGH);
#endif

}
    1ae8:	cf 91       	pop	r28
    1aea:	df 91       	pop	r29
    1aec:	08 95       	ret

00001aee <LED_On>:

void LED_On(LED_ID id){
    1aee:	df 93       	push	r29
    1af0:	cf 93       	push	r28
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <LED_On+0x6>
    1af4:	0f 92       	push	r0
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	89 83       	std	Y+1, r24	; 0x01
	switch (id) {
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	3b 83       	std	Y+3, r19	; 0x03
    1b04:	2a 83       	std	Y+2, r18	; 0x02
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	79 f0       	breq	.+30     	; 0x1b2e <LED_On+0x40>
    1b10:	2a 81       	ldd	r18, Y+2	; 0x02
    1b12:	3b 81       	ldd	r19, Y+3	; 0x03
    1b14:	22 30       	cpi	r18, 0x02	; 2
    1b16:	31 05       	cpc	r19, r1
    1b18:	81 f0       	breq	.+32     	; 0x1b3a <LED_On+0x4c>
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	89 f4       	brne	.+34     	; 0x1b44 <LED_On+0x56>
		case LED1:
#ifdef POSTIVE_CONNECTTION
			GPIO_writePin(LED_PORT,LED1_PIN,LOGIC_HIGH);
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    1b2c:	0b c0       	rjmp	.+22     	; 0x1b44 <LED_On+0x56>
			GPIO_writePin(LED_PORT,LED1_PIN,LOGIC_LOW);
#endif
			break;
		case LED2:
#ifdef POSTIVE_CONNECTTION
			GPIO_writePin(LED_PORT,LED2_PIN,LOGIC_HIGH);
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    1b38:	05 c0       	rjmp	.+10     	; 0x1b44 <LED_On+0x56>
#endif

			break;
		case LED3:
#ifdef POSTIVE_CONNECTTION
			GPIO_writePin(LED_PORT,LED3_PIN,LOGIC_HIGH);
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	62 e0       	ldi	r22, 0x02	; 2
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
#endif
			break;
		default:
			break;
	}
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <LED_Off>:

void LED_Off(LED_ID id){
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <LED_Off+0x6>
    1b56:	0f 92       	push	r0
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	89 83       	std	Y+1, r24	; 0x01
	switch (id) {
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3b 83       	std	Y+3, r19	; 0x03
    1b66:	2a 83       	std	Y+2, r18	; 0x02
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	79 f0       	breq	.+30     	; 0x1b90 <LED_Off+0x40>
    1b72:	2a 81       	ldd	r18, Y+2	; 0x02
    1b74:	3b 81       	ldd	r19, Y+3	; 0x03
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	81 f0       	breq	.+32     	; 0x1b9c <LED_Off+0x4c>
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	89 f4       	brne	.+34     	; 0x1ba6 <LED_Off+0x56>
			case LED1:
#ifdef POSTIVE_CONNECTTION
			GPIO_writePin(LED_PORT,LED1_PIN,LOGIC_LOW);
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    1b8e:	0b c0       	rjmp	.+22     	; 0x1ba6 <LED_Off+0x56>
			GPIO_writePin(LED_PORT,LED1_PIN,LOGIC_HIGH);
#endif
				break;
			case LED2:
#ifdef POSTIVE_CONNECTTION
				GPIO_writePin(LED_PORT,LED2_PIN,LOGIC_LOW);
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	61 e0       	ldi	r22, 0x01	; 1
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <LED_Off+0x56>
				GPIO_writePin(PORTB_ID,LED2_PIN,LOGIC_HIGH);
#endif
				break;
			case LED3:
#ifdef POSTIVE_CONNECTTION
				GPIO_writePin(LED_PORT,LED3_PIN,LOGIC_LOW);
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	62 e0       	ldi	r22, 0x02	; 2
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
#endif
				break;
			default:
				break;
		}
}
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	2e 97       	sbiw	r28, 0x0e	; 14
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	41 e0       	ldi	r20, 0x01	; 1
    1bcc:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	62 e0       	ldi	r22, 0x02	; 2
    1bd4:	41 e0       	ldi	r20, 0x01	; 1
    1bd6:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 ea       	ldi	r26, 0xA0	; 160
    1be0:	b1 e4       	ldi	r27, 0x41	; 65
    1be2:	8b 87       	std	Y+11, r24	; 0x0b
    1be4:	9c 87       	std	Y+12, r25	; 0x0c
    1be6:	ad 87       	std	Y+13, r26	; 0x0d
    1be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a e7       	ldi	r20, 0x7A	; 122
    1bf8:	55 e4       	ldi	r21, 0x45	; 69
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8f 83       	std	Y+7, r24	; 0x07
    1c04:	98 87       	std	Y+8, r25	; 0x08
    1c06:	a9 87       	std	Y+9, r26	; 0x09
    1c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_init+0x7a>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_init+0xf8>
	else if (__tmp > 65535)
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_init+0xda>
    1c6e:	80 e9       	ldi	r24, 0x90	; 144
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_init+0xc8>
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_init+0xbc>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_init+0x104>
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	63 e0       	ldi	r22, 0x03	; 3
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	64 e0       	ldi	r22, 0x04	; 4
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	65 e0       	ldi	r22, 0x05	; 5
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	66 e0       	ldi	r22, 0x06	; 6
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1ce6:	83 e3       	ldi	r24, 0x33	; 51
    1ce8:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1cec:	82 e3       	ldi	r24, 0x32	; 50
    1cee:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1cf2:	88 e2       	ldi	r24, 0x28	; 40
    1cf4:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1cf8:	8c e0       	ldi	r24, 0x0C	; 12
    1cfa:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
}
    1d04:	2e 96       	adiw	r28, 0x0e	; 14
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d16:	0f 93       	push	r16
    1d18:	1f 93       	push	r17
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	c3 56       	subi	r28, 0x63	; 99
    1d24:	d0 40       	sbci	r29, 0x00	; 0
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	fe 01       	movw	r30, r28
    1d32:	ed 59       	subi	r30, 0x9D	; 157
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    1d42:	fe 01       	movw	r30, r28
    1d44:	e1 5a       	subi	r30, 0xA1	; 161
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a0 e8       	ldi	r26, 0x80	; 128
    1d4e:	bf e3       	ldi	r27, 0x3F	; 63
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	a2 83       	std	Z+2, r26	; 0x02
    1d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	8e 01       	movw	r16, r28
    1d5a:	05 5a       	subi	r16, 0xA5	; 165
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e1 5a       	subi	r30, 0xA1	; 161
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a e7       	ldi	r20, 0x7A	; 122
    1d72:	55 e4       	ldi	r21, 0x45	; 69
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	a2 83       	std	Z+2, r26	; 0x02
    1d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d86:	fe 01       	movw	r30, r28
    1d88:	e5 5a       	subi	r30, 0xA5	; 165
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	44 f4       	brge	.+16     	; 0x1db4 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1da4:	fe 01       	movw	r30, r28
    1da6:	e7 5a       	subi	r30, 0xA7	; 167
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	64 c0       	rjmp	.+200    	; 0x1e7c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1db4:	fe 01       	movw	r30, r28
    1db6:	e5 5a       	subi	r30, 0xA5	; 165
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	0c f0       	brlt	.+2      	; 0x1dd4 <LCD_sendCommand+0xbe>
    1dd2:	43 c0       	rjmp	.+134    	; 0x1e5a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e1 5a       	subi	r30, 0xA1	; 161
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	8e 01       	movw	r16, r28
    1df4:	07 5a       	subi	r16, 0xA7	; 167
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	f8 01       	movw	r30, r16
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	1f c0       	rjmp	.+62     	; 0x1e4a <LCD_sendCommand+0x134>
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e9 5a       	subi	r30, 0xA9	; 169
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 e9       	ldi	r24, 0x90	; 144
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	80 83       	st	Z, r24
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e9 5a       	subi	r30, 0xA9	; 169
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_sendCommand+0x10e>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e9 5a       	subi	r30, 0xA9	; 169
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	de 01       	movw	r26, r28
    1e34:	a7 5a       	subi	r26, 0xA7	; 167
    1e36:	bf 4f       	sbci	r27, 0xFF	; 255
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e7 5a       	subi	r30, 0xA7	; 167
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	9c 93       	st	X, r25
    1e48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e7 5a       	subi	r30, 0xA7	; 167
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	d1 f6       	brne	.-76     	; 0x1e0c <LCD_sendCommand+0xf6>
    1e58:	27 c0       	rjmp	.+78     	; 0x1ea8 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	07 5a       	subi	r16, 0xA7	; 167
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e5 5a       	subi	r30, 0xA5	; 165
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	f8 01       	movw	r30, r16
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	de 01       	movw	r26, r28
    1e7e:	ab 5a       	subi	r26, 0xAB	; 171
    1e80:	bf 4f       	sbci	r27, 0xFF	; 255
    1e82:	fe 01       	movw	r30, r28
    1e84:	e7 5a       	subi	r30, 0xA7	; 167
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	8d 93       	st	X+, r24
    1e8e:	9c 93       	st	X, r25
    1e90:	fe 01       	movw	r30, r28
    1e92:	eb 5a       	subi	r30, 0xAB	; 171
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_sendCommand+0x184>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	eb 5a       	subi	r30, 0xAB	; 171
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ef 5a       	subi	r30, 0xAF	; 175
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e8       	ldi	r26, 0x80	; 128
    1ebe:	bf e3       	ldi	r27, 0x3F	; 63
    1ec0:	80 83       	st	Z, r24
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	a2 83       	std	Z+2, r26	; 0x02
    1ec6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec8:	8e 01       	movw	r16, r28
    1eca:	03 5b       	subi	r16, 0xB3	; 179
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ef 5a       	subi	r30, 0xAF	; 175
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4a e7       	ldi	r20, 0x7A	; 122
    1ee2:	55 e4       	ldi	r21, 0x45	; 69
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	f8 01       	movw	r30, r16
    1eee:	80 83       	st	Z, r24
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	a2 83       	std	Z+2, r26	; 0x02
    1ef4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e3 5b       	subi	r30, 0xB3	; 179
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	44 f4       	brge	.+16     	; 0x1f24 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1f14:	fe 01       	movw	r30, r28
    1f16:	e5 5b       	subi	r30, 0xB5	; 181
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	64 c0       	rjmp	.+200    	; 0x1fec <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1f24:	fe 01       	movw	r30, r28
    1f26:	e3 5b       	subi	r30, 0xB3	; 179
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	0c f0       	brlt	.+2      	; 0x1f44 <LCD_sendCommand+0x22e>
    1f42:	43 c0       	rjmp	.+134    	; 0x1fca <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	fe 01       	movw	r30, r28
    1f46:	ef 5a       	subi	r30, 0xAF	; 175
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8e 01       	movw	r16, r28
    1f64:	05 5b       	subi	r16, 0xB5	; 181
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	f8 01       	movw	r30, r16
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	1f c0       	rjmp	.+62     	; 0x1fba <LCD_sendCommand+0x2a4>
    1f7c:	fe 01       	movw	r30, r28
    1f7e:	e7 5b       	subi	r30, 0xB7	; 183
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 e9       	ldi	r24, 0x90	; 144
    1f84:	91 e0       	ldi	r25, 0x01	; 1
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e7 5b       	subi	r30, 0xB7	; 183
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_sendCommand+0x27e>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e7 5b       	subi	r30, 0xB7	; 183
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa2:	de 01       	movw	r26, r28
    1fa4:	a5 5b       	subi	r26, 0xB5	; 181
    1fa6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e5 5b       	subi	r30, 0xB5	; 181
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	11 96       	adiw	r26, 0x01	; 1
    1fb6:	9c 93       	st	X, r25
    1fb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e5 5b       	subi	r30, 0xB5	; 181
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	d1 f6       	brne	.-76     	; 0x1f7c <LCD_sendCommand+0x266>
    1fc8:	27 c0       	rjmp	.+78     	; 0x2018 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	8e 01       	movw	r16, r28
    1fcc:	05 5b       	subi	r16, 0xB5	; 181
    1fce:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e3 5b       	subi	r30, 0xB3	; 179
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	f8 01       	movw	r30, r16
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
    1fec:	de 01       	movw	r26, r28
    1fee:	a9 5b       	subi	r26, 0xB9	; 185
    1ff0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e5 5b       	subi	r30, 0xB5	; 181
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	8d 93       	st	X+, r24
    1ffe:	9c 93       	st	X, r25
    2000:	fe 01       	movw	r30, r28
    2002:	e9 5b       	subi	r30, 0xB9	; 185
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_sendCommand+0x2f4>
    200e:	fe 01       	movw	r30, r28
    2010:	e9 5b       	subi	r30, 0xB9	; 185
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2018:	fe 01       	movw	r30, r28
    201a:	ed 59       	subi	r30, 0x9D	; 157
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 81       	ld	r24, Z
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	80 71       	andi	r24, 0x10	; 16
    2026:	90 70       	andi	r25, 0x00	; 0
    2028:	95 95       	asr	r25
    202a:	87 95       	ror	r24
    202c:	95 95       	asr	r25
    202e:	87 95       	ror	r24
    2030:	95 95       	asr	r25
    2032:	87 95       	ror	r24
    2034:	95 95       	asr	r25
    2036:	87 95       	ror	r24
    2038:	98 2f       	mov	r25, r24
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	63 e0       	ldi	r22, 0x03	; 3
    203e:	49 2f       	mov	r20, r25
    2040:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2044:	fe 01       	movw	r30, r28
    2046:	ed 59       	subi	r30, 0x9D	; 157
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	88 2f       	mov	r24, r24
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	80 72       	andi	r24, 0x20	; 32
    2052:	90 70       	andi	r25, 0x00	; 0
    2054:	95 95       	asr	r25
    2056:	87 95       	ror	r24
    2058:	95 95       	asr	r25
    205a:	87 95       	ror	r24
    205c:	95 95       	asr	r25
    205e:	87 95       	ror	r24
    2060:	95 95       	asr	r25
    2062:	87 95       	ror	r24
    2064:	95 95       	asr	r25
    2066:	87 95       	ror	r24
    2068:	98 2f       	mov	r25, r24
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	64 e0       	ldi	r22, 0x04	; 4
    206e:	49 2f       	mov	r20, r25
    2070:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2074:	fe 01       	movw	r30, r28
    2076:	ed 59       	subi	r30, 0x9D	; 157
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	80 81       	ld	r24, Z
    207c:	88 2f       	mov	r24, r24
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	80 74       	andi	r24, 0x40	; 64
    2082:	90 70       	andi	r25, 0x00	; 0
    2084:	08 2e       	mov	r0, r24
    2086:	89 2f       	mov	r24, r25
    2088:	00 0c       	add	r0, r0
    208a:	88 1f       	adc	r24, r24
    208c:	99 0b       	sbc	r25, r25
    208e:	00 0c       	add	r0, r0
    2090:	88 1f       	adc	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	98 2f       	mov	r25, r24
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	65 e0       	ldi	r22, 0x05	; 5
    209a:	49 2f       	mov	r20, r25
    209c:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    20a0:	fe 01       	movw	r30, r28
    20a2:	ed 59       	subi	r30, 0x9D	; 157
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	80 81       	ld	r24, Z
    20a8:	98 2f       	mov	r25, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	99 27       	eor	r25, r25
    20ae:	99 1f       	adc	r25, r25
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	66 e0       	ldi	r22, 0x06	; 6
    20b4:	49 2f       	mov	r20, r25
    20b6:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    20ba:	fe 01       	movw	r30, r28
    20bc:	ed 5b       	subi	r30, 0xBD	; 189
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a0 e8       	ldi	r26, 0x80	; 128
    20c6:	bf e3       	ldi	r27, 0x3F	; 63
    20c8:	80 83       	st	Z, r24
    20ca:	91 83       	std	Z+1, r25	; 0x01
    20cc:	a2 83       	std	Z+2, r26	; 0x02
    20ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d0:	8e 01       	movw	r16, r28
    20d2:	01 5c       	subi	r16, 0xC1	; 193
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	fe 01       	movw	r30, r28
    20d8:	ed 5b       	subi	r30, 0xBD	; 189
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	4a e7       	ldi	r20, 0x7A	; 122
    20ea:	55 e4       	ldi	r21, 0x45	; 69
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	f8 01       	movw	r30, r16
    20f6:	80 83       	st	Z, r24
    20f8:	91 83       	std	Z+1, r25	; 0x01
    20fa:	a2 83       	std	Z+2, r26	; 0x02
    20fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20fe:	fe 01       	movw	r30, r28
    2100:	ff 96       	adiw	r30, 0x3f	; 63
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	2c f4       	brge	.+10     	; 0x2124 <LCD_sendCommand+0x40e>
		__ticks = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	9e af       	std	Y+62, r25	; 0x3e
    2120:	8d af       	std	Y+61, r24	; 0x3d
    2122:	46 c0       	rjmp	.+140    	; 0x21b0 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2124:	fe 01       	movw	r30, r28
    2126:	ff 96       	adiw	r30, 0x3f	; 63
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	3f ef       	ldi	r19, 0xFF	; 255
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	57 e4       	ldi	r21, 0x47	; 71
    2138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213c:	18 16       	cp	r1, r24
    213e:	64 f5       	brge	.+88     	; 0x2198 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2140:	fe 01       	movw	r30, r28
    2142:	ed 5b       	subi	r30, 0xBD	; 189
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9e af       	std	Y+62, r25	; 0x3e
    216c:	8d af       	std	Y+61, r24	; 0x3d
    216e:	0f c0       	rjmp	.+30     	; 0x218e <LCD_sendCommand+0x478>
    2170:	80 e9       	ldi	r24, 0x90	; 144
    2172:	91 e0       	ldi	r25, 0x01	; 1
    2174:	9c af       	std	Y+60, r25	; 0x3c
    2176:	8b af       	std	Y+59, r24	; 0x3b
    2178:	8b ad       	ldd	r24, Y+59	; 0x3b
    217a:	9c ad       	ldd	r25, Y+60	; 0x3c
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_sendCommand+0x466>
    2180:	9c af       	std	Y+60, r25	; 0x3c
    2182:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	8d ad       	ldd	r24, Y+61	; 0x3d
    2186:	9e ad       	ldd	r25, Y+62	; 0x3e
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	9e af       	std	Y+62, r25	; 0x3e
    218c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2190:	9e ad       	ldd	r25, Y+62	; 0x3e
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <LCD_sendCommand+0x45a>
    2196:	16 c0       	rjmp	.+44     	; 0x21c4 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	fe 01       	movw	r30, r28
    219a:	ff 96       	adiw	r30, 0x3f	; 63
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9e af       	std	Y+62, r25	; 0x3e
    21ae:	8d af       	std	Y+61, r24	; 0x3d
    21b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    21b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    21b4:	9a af       	std	Y+58, r25	; 0x3a
    21b6:	89 af       	std	Y+57, r24	; 0x39
    21b8:	89 ad       	ldd	r24, Y+57	; 0x39
    21ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <LCD_sendCommand+0x4a6>
    21c0:	9a af       	std	Y+58, r25	; 0x3a
    21c2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	62 e0       	ldi	r22, 0x02	; 2
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	a0 e8       	ldi	r26, 0x80	; 128
    21d4:	bf e3       	ldi	r27, 0x3F	; 63
    21d6:	8d ab       	std	Y+53, r24	; 0x35
    21d8:	9e ab       	std	Y+54, r25	; 0x36
    21da:	af ab       	std	Y+55, r26	; 0x37
    21dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21de:	6d a9       	ldd	r22, Y+53	; 0x35
    21e0:	7e a9       	ldd	r23, Y+54	; 0x36
    21e2:	8f a9       	ldd	r24, Y+55	; 0x37
    21e4:	98 ad       	ldd	r25, Y+56	; 0x38
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	4a e7       	ldi	r20, 0x7A	; 122
    21ec:	55 e4       	ldi	r21, 0x45	; 69
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	89 ab       	std	Y+49, r24	; 0x31
    21f8:	9a ab       	std	Y+50, r25	; 0x32
    21fa:	ab ab       	std	Y+51, r26	; 0x33
    21fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2200:	7a a9       	ldd	r23, Y+50	; 0x32
    2202:	8b a9       	ldd	r24, Y+51	; 0x33
    2204:	9c a9       	ldd	r25, Y+52	; 0x34
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e8       	ldi	r20, 0x80	; 128
    220c:	5f e3       	ldi	r21, 0x3F	; 63
    220e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2212:	88 23       	and	r24, r24
    2214:	2c f4       	brge	.+10     	; 0x2220 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	98 ab       	std	Y+48, r25	; 0x30
    221c:	8f a7       	std	Y+47, r24	; 0x2f
    221e:	3f c0       	rjmp	.+126    	; 0x229e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2220:	69 a9       	ldd	r22, Y+49	; 0x31
    2222:	7a a9       	ldd	r23, Y+50	; 0x32
    2224:	8b a9       	ldd	r24, Y+51	; 0x33
    2226:	9c a9       	ldd	r25, Y+52	; 0x34
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	3f ef       	ldi	r19, 0xFF	; 255
    222c:	4f e7       	ldi	r20, 0x7F	; 127
    222e:	57 e4       	ldi	r21, 0x47	; 71
    2230:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2234:	18 16       	cp	r1, r24
    2236:	4c f5       	brge	.+82     	; 0x228a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2238:	6d a9       	ldd	r22, Y+53	; 0x35
    223a:	7e a9       	ldd	r23, Y+54	; 0x36
    223c:	8f a9       	ldd	r24, Y+55	; 0x37
    223e:	98 ad       	ldd	r25, Y+56	; 0x38
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e2       	ldi	r20, 0x20	; 32
    2246:	51 e4       	ldi	r21, 0x41	; 65
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	98 ab       	std	Y+48, r25	; 0x30
    225e:	8f a7       	std	Y+47, r24	; 0x2f
    2260:	0f c0       	rjmp	.+30     	; 0x2280 <LCD_sendCommand+0x56a>
    2262:	80 e9       	ldi	r24, 0x90	; 144
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	9e a7       	std	Y+46, r25	; 0x2e
    2268:	8d a7       	std	Y+45, r24	; 0x2d
    226a:	8d a5       	ldd	r24, Y+45	; 0x2d
    226c:	9e a5       	ldd	r25, Y+46	; 0x2e
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	f1 f7       	brne	.-4      	; 0x226e <LCD_sendCommand+0x558>
    2272:	9e a7       	std	Y+46, r25	; 0x2e
    2274:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2276:	8f a5       	ldd	r24, Y+47	; 0x2f
    2278:	98 a9       	ldd	r25, Y+48	; 0x30
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	98 ab       	std	Y+48, r25	; 0x30
    227e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2280:	8f a5       	ldd	r24, Y+47	; 0x2f
    2282:	98 a9       	ldd	r25, Y+48	; 0x30
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	69 f7       	brne	.-38     	; 0x2262 <LCD_sendCommand+0x54c>
    2288:	14 c0       	rjmp	.+40     	; 0x22b2 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    228a:	69 a9       	ldd	r22, Y+49	; 0x31
    228c:	7a a9       	ldd	r23, Y+50	; 0x32
    228e:	8b a9       	ldd	r24, Y+51	; 0x33
    2290:	9c a9       	ldd	r25, Y+52	; 0x34
    2292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	98 ab       	std	Y+48, r25	; 0x30
    229c:	8f a7       	std	Y+47, r24	; 0x2f
    229e:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a0:	98 a9       	ldd	r25, Y+48	; 0x30
    22a2:	9c a7       	std	Y+44, r25	; 0x2c
    22a4:	8b a7       	std	Y+43, r24	; 0x2b
    22a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <LCD_sendCommand+0x594>
    22ae:	9c a7       	std	Y+44, r25	; 0x2c
    22b0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	62 e0       	ldi	r22, 0x02	; 2
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a0 e8       	ldi	r26, 0x80	; 128
    22c2:	bf e3       	ldi	r27, 0x3F	; 63
    22c4:	8f a3       	std	Y+39, r24	; 0x27
    22c6:	98 a7       	std	Y+40, r25	; 0x28
    22c8:	a9 a7       	std	Y+41, r26	; 0x29
    22ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	6f a1       	ldd	r22, Y+39	; 0x27
    22ce:	78 a5       	ldd	r23, Y+40	; 0x28
    22d0:	89 a5       	ldd	r24, Y+41	; 0x29
    22d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a e7       	ldi	r20, 0x7A	; 122
    22da:	55 e4       	ldi	r21, 0x45	; 69
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	8b a3       	std	Y+35, r24	; 0x23
    22e6:	9c a3       	std	Y+36, r25	; 0x24
    22e8:	ad a3       	std	Y+37, r26	; 0x25
    22ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ec:	6b a1       	ldd	r22, Y+35	; 0x23
    22ee:	7c a1       	ldd	r23, Y+36	; 0x24
    22f0:	8d a1       	ldd	r24, Y+37	; 0x25
    22f2:	9e a1       	ldd	r25, Y+38	; 0x26
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9a a3       	std	Y+34, r25	; 0x22
    230a:	89 a3       	std	Y+33, r24	; 0x21
    230c:	3f c0       	rjmp	.+126    	; 0x238c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    230e:	6b a1       	ldd	r22, Y+35	; 0x23
    2310:	7c a1       	ldd	r23, Y+36	; 0x24
    2312:	8d a1       	ldd	r24, Y+37	; 0x25
    2314:	9e a1       	ldd	r25, Y+38	; 0x26
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	6f a1       	ldd	r22, Y+39	; 0x27
    2328:	78 a5       	ldd	r23, Y+40	; 0x28
    232a:	89 a5       	ldd	r24, Y+41	; 0x29
    232c:	9a a5       	ldd	r25, Y+42	; 0x2a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9a a3       	std	Y+34, r25	; 0x22
    234c:	89 a3       	std	Y+33, r24	; 0x21
    234e:	0f c0       	rjmp	.+30     	; 0x236e <LCD_sendCommand+0x658>
    2350:	80 e9       	ldi	r24, 0x90	; 144
    2352:	91 e0       	ldi	r25, 0x01	; 1
    2354:	98 a3       	std	Y+32, r25	; 0x20
    2356:	8f 8f       	std	Y+31, r24	; 0x1f
    2358:	8f 8d       	ldd	r24, Y+31	; 0x1f
    235a:	98 a1       	ldd	r25, Y+32	; 0x20
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_sendCommand+0x646>
    2360:	98 a3       	std	Y+32, r25	; 0x20
    2362:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	89 a1       	ldd	r24, Y+33	; 0x21
    2366:	9a a1       	ldd	r25, Y+34	; 0x22
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	9a a3       	std	Y+34, r25	; 0x22
    236c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	89 a1       	ldd	r24, Y+33	; 0x21
    2370:	9a a1       	ldd	r25, Y+34	; 0x22
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <LCD_sendCommand+0x63a>
    2376:	14 c0       	rjmp	.+40     	; 0x23a0 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	6b a1       	ldd	r22, Y+35	; 0x23
    237a:	7c a1       	ldd	r23, Y+36	; 0x24
    237c:	8d a1       	ldd	r24, Y+37	; 0x25
    237e:	9e a1       	ldd	r25, Y+38	; 0x26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9a a3       	std	Y+34, r25	; 0x22
    238a:	89 a3       	std	Y+33, r24	; 0x21
    238c:	89 a1       	ldd	r24, Y+33	; 0x21
    238e:	9a a1       	ldd	r25, Y+34	; 0x22
    2390:	9e 8f       	std	Y+30, r25	; 0x1e
    2392:	8d 8f       	std	Y+29, r24	; 0x1d
    2394:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2396:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_sendCommand+0x682>
    239c:	9e 8f       	std	Y+30, r25	; 0x1e
    239e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    23a0:	fe 01       	movw	r30, r28
    23a2:	ed 59       	subi	r30, 0x9D	; 157
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	80 81       	ld	r24, Z
    23a8:	98 2f       	mov	r25, r24
    23aa:	91 70       	andi	r25, 0x01	; 1
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	63 e0       	ldi	r22, 0x03	; 3
    23b0:	49 2f       	mov	r20, r25
    23b2:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    23b6:	fe 01       	movw	r30, r28
    23b8:	ed 59       	subi	r30, 0x9D	; 157
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	82 70       	andi	r24, 0x02	; 2
    23c4:	90 70       	andi	r25, 0x00	; 0
    23c6:	95 95       	asr	r25
    23c8:	87 95       	ror	r24
    23ca:	98 2f       	mov	r25, r24
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	64 e0       	ldi	r22, 0x04	; 4
    23d0:	49 2f       	mov	r20, r25
    23d2:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    23d6:	fe 01       	movw	r30, r28
    23d8:	ed 59       	subi	r30, 0x9D	; 157
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	84 70       	andi	r24, 0x04	; 4
    23e4:	90 70       	andi	r25, 0x00	; 0
    23e6:	95 95       	asr	r25
    23e8:	87 95       	ror	r24
    23ea:	95 95       	asr	r25
    23ec:	87 95       	ror	r24
    23ee:	98 2f       	mov	r25, r24
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	65 e0       	ldi	r22, 0x05	; 5
    23f4:	49 2f       	mov	r20, r25
    23f6:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    23fa:	fe 01       	movw	r30, r28
    23fc:	ed 59       	subi	r30, 0x9D	; 157
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	88 2f       	mov	r24, r24
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	88 70       	andi	r24, 0x08	; 8
    2408:	90 70       	andi	r25, 0x00	; 0
    240a:	95 95       	asr	r25
    240c:	87 95       	ror	r24
    240e:	95 95       	asr	r25
    2410:	87 95       	ror	r24
    2412:	95 95       	asr	r25
    2414:	87 95       	ror	r24
    2416:	98 2f       	mov	r25, r24
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	66 e0       	ldi	r22, 0x06	; 6
    241c:	49 2f       	mov	r20, r25
    241e:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	a0 e8       	ldi	r26, 0x80	; 128
    2428:	bf e3       	ldi	r27, 0x3F	; 63
    242a:	89 8f       	std	Y+25, r24	; 0x19
    242c:	9a 8f       	std	Y+26, r25	; 0x1a
    242e:	ab 8f       	std	Y+27, r26	; 0x1b
    2430:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2432:	69 8d       	ldd	r22, Y+25	; 0x19
    2434:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2436:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2438:	9c 8d       	ldd	r25, Y+28	; 0x1c
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4a e7       	ldi	r20, 0x7A	; 122
    2440:	55 e4       	ldi	r21, 0x45	; 69
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8d 8b       	std	Y+21, r24	; 0x15
    244c:	9e 8b       	std	Y+22, r25	; 0x16
    244e:	af 8b       	std	Y+23, r26	; 0x17
    2450:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2452:	6d 89       	ldd	r22, Y+21	; 0x15
    2454:	7e 89       	ldd	r23, Y+22	; 0x16
    2456:	8f 89       	ldd	r24, Y+23	; 0x17
    2458:	98 8d       	ldd	r25, Y+24	; 0x18
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e8       	ldi	r20, 0x80	; 128
    2460:	5f e3       	ldi	r21, 0x3F	; 63
    2462:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2466:	88 23       	and	r24, r24
    2468:	2c f4       	brge	.+10     	; 0x2474 <LCD_sendCommand+0x75e>
		__ticks = 1;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	9c 8b       	std	Y+20, r25	; 0x14
    2470:	8b 8b       	std	Y+19, r24	; 0x13
    2472:	3f c0       	rjmp	.+126    	; 0x24f2 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2474:	6d 89       	ldd	r22, Y+21	; 0x15
    2476:	7e 89       	ldd	r23, Y+22	; 0x16
    2478:	8f 89       	ldd	r24, Y+23	; 0x17
    247a:	98 8d       	ldd	r25, Y+24	; 0x18
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	3f ef       	ldi	r19, 0xFF	; 255
    2480:	4f e7       	ldi	r20, 0x7F	; 127
    2482:	57 e4       	ldi	r21, 0x47	; 71
    2484:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2488:	18 16       	cp	r1, r24
    248a:	4c f5       	brge	.+82     	; 0x24de <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248c:	69 8d       	ldd	r22, Y+25	; 0x19
    248e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e2       	ldi	r20, 0x20	; 32
    249a:	51 e4       	ldi	r21, 0x41	; 65
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	9c 8b       	std	Y+20, r25	; 0x14
    24b2:	8b 8b       	std	Y+19, r24	; 0x13
    24b4:	0f c0       	rjmp	.+30     	; 0x24d4 <LCD_sendCommand+0x7be>
    24b6:	80 e9       	ldi	r24, 0x90	; 144
    24b8:	91 e0       	ldi	r25, 0x01	; 1
    24ba:	9a 8b       	std	Y+18, r25	; 0x12
    24bc:	89 8b       	std	Y+17, r24	; 0x11
    24be:	89 89       	ldd	r24, Y+17	; 0x11
    24c0:	9a 89       	ldd	r25, Y+18	; 0x12
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <LCD_sendCommand+0x7ac>
    24c6:	9a 8b       	std	Y+18, r25	; 0x12
    24c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ca:	8b 89       	ldd	r24, Y+19	; 0x13
    24cc:	9c 89       	ldd	r25, Y+20	; 0x14
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	9c 8b       	std	Y+20, r25	; 0x14
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d4:	8b 89       	ldd	r24, Y+19	; 0x13
    24d6:	9c 89       	ldd	r25, Y+20	; 0x14
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	69 f7       	brne	.-38     	; 0x24b6 <LCD_sendCommand+0x7a0>
    24dc:	14 c0       	rjmp	.+40     	; 0x2506 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24de:	6d 89       	ldd	r22, Y+21	; 0x15
    24e0:	7e 89       	ldd	r23, Y+22	; 0x16
    24e2:	8f 89       	ldd	r24, Y+23	; 0x17
    24e4:	98 8d       	ldd	r25, Y+24	; 0x18
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	9c 8b       	std	Y+20, r25	; 0x14
    24f0:	8b 8b       	std	Y+19, r24	; 0x13
    24f2:	8b 89       	ldd	r24, Y+19	; 0x13
    24f4:	9c 89       	ldd	r25, Y+20	; 0x14
    24f6:	98 8b       	std	Y+16, r25	; 0x10
    24f8:	8f 87       	std	Y+15, r24	; 0x0f
    24fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fc:	98 89       	ldd	r25, Y+16	; 0x10
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <LCD_sendCommand+0x7e8>
    2502:	98 8b       	std	Y+16, r25	; 0x10
    2504:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	62 e0       	ldi	r22, 0x02	; 2
    250a:	40 e0       	ldi	r20, 0x00	; 0
    250c:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e8       	ldi	r26, 0x80	; 128
    2516:	bf e3       	ldi	r27, 0x3F	; 63
    2518:	8b 87       	std	Y+11, r24	; 0x0b
    251a:	9c 87       	std	Y+12, r25	; 0x0c
    251c:	ad 87       	std	Y+13, r26	; 0x0d
    251e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	6b 85       	ldd	r22, Y+11	; 0x0b
    2522:	7c 85       	ldd	r23, Y+12	; 0x0c
    2524:	8d 85       	ldd	r24, Y+13	; 0x0d
    2526:	9e 85       	ldd	r25, Y+14	; 0x0e
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a e7       	ldi	r20, 0x7A	; 122
    252e:	55 e4       	ldi	r21, 0x45	; 69
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8f 83       	std	Y+7, r24	; 0x07
    253a:	98 87       	std	Y+8, r25	; 0x08
    253c:	a9 87       	std	Y+9, r26	; 0x09
    253e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2540:	6f 81       	ldd	r22, Y+7	; 0x07
    2542:	78 85       	ldd	r23, Y+8	; 0x08
    2544:	89 85       	ldd	r24, Y+9	; 0x09
    2546:	9a 85       	ldd	r25, Y+10	; 0x0a
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2554:	88 23       	and	r24, r24
    2556:	2c f4       	brge	.+10     	; 0x2562 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	3f c0       	rjmp	.+126    	; 0x25e0 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2562:	6f 81       	ldd	r22, Y+7	; 0x07
    2564:	78 85       	ldd	r23, Y+8	; 0x08
    2566:	89 85       	ldd	r24, Y+9	; 0x09
    2568:	9a 85       	ldd	r25, Y+10	; 0x0a
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	57 e4       	ldi	r21, 0x47	; 71
    2572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2576:	18 16       	cp	r1, r24
    2578:	4c f5       	brge	.+82     	; 0x25cc <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257a:	6b 85       	ldd	r22, Y+11	; 0x0b
    257c:	7c 85       	ldd	r23, Y+12	; 0x0c
    257e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2580:	9e 85       	ldd	r25, Y+14	; 0x0e
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <LCD_sendCommand+0x8ac>
    25a4:	80 e9       	ldi	r24, 0x90	; 144
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    25a8:	9c 83       	std	Y+4, r25	; 0x04
    25aa:	8b 83       	std	Y+3, r24	; 0x03
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	9c 81       	ldd	r25, Y+4	; 0x04
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <LCD_sendCommand+0x89a>
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <LCD_sendCommand+0x88e>
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	6f 81       	ldd	r22, Y+7	; 0x07
    25ce:	78 85       	ldd	r23, Y+8	; 0x08
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	9a 81       	ldd	r25, Y+2	; 0x02
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCD_sendCommand+0x8d6>
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    25f4:	cd 59       	subi	r28, 0x9D	; 157
    25f6:	df 4f       	sbci	r29, 0xFF	; 255
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	08 95       	ret

0000260c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    260c:	0f 93       	push	r16
    260e:	1f 93       	push	r17
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	c3 56       	subi	r28, 0x63	; 99
    261a:	d0 40       	sbci	r29, 0x00	; 0
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	fe 01       	movw	r30, r28
    2628:	ed 59       	subi	r30, 0x9D	; 157
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	61 e0       	ldi	r22, 0x01	; 1
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    2638:	fe 01       	movw	r30, r28
    263a:	e1 5a       	subi	r30, 0xA1	; 161
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	a0 e8       	ldi	r26, 0x80	; 128
    2644:	bf e3       	ldi	r27, 0x3F	; 63
    2646:	80 83       	st	Z, r24
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	a2 83       	std	Z+2, r26	; 0x02
    264c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264e:	8e 01       	movw	r16, r28
    2650:	05 5a       	subi	r16, 0xA5	; 165
    2652:	1f 4f       	sbci	r17, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	e1 5a       	subi	r30, 0xA1	; 161
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	4a e7       	ldi	r20, 0x7A	; 122
    2668:	55 e4       	ldi	r21, 0x45	; 69
    266a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	f8 01       	movw	r30, r16
    2674:	80 83       	st	Z, r24
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	a2 83       	std	Z+2, r26	; 0x02
    267a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267c:	fe 01       	movw	r30, r28
    267e:	e5 5a       	subi	r30, 0xA5	; 165
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	44 f4       	brge	.+16     	; 0x26aa <LCD_displayCharacter+0x9e>
		__ticks = 1;
    269a:	fe 01       	movw	r30, r28
    269c:	e7 5a       	subi	r30, 0xA7	; 167
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
    26a8:	64 c0       	rjmp	.+200    	; 0x2772 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    26aa:	fe 01       	movw	r30, r28
    26ac:	e5 5a       	subi	r30, 0xA5	; 165
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	60 81       	ld	r22, Z
    26b2:	71 81       	ldd	r23, Z+1	; 0x01
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	93 81       	ldd	r25, Z+3	; 0x03
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	3f ef       	ldi	r19, 0xFF	; 255
    26bc:	4f e7       	ldi	r20, 0x7F	; 127
    26be:	57 e4       	ldi	r21, 0x47	; 71
    26c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c4:	18 16       	cp	r1, r24
    26c6:	0c f0       	brlt	.+2      	; 0x26ca <LCD_displayCharacter+0xbe>
    26c8:	43 c0       	rjmp	.+134    	; 0x2750 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	fe 01       	movw	r30, r28
    26cc:	e1 5a       	subi	r30, 0xA1	; 161
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e2       	ldi	r20, 0x20	; 32
    26de:	51 e4       	ldi	r21, 0x41	; 65
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8e 01       	movw	r16, r28
    26ea:	07 5a       	subi	r16, 0xA7	; 167
    26ec:	1f 4f       	sbci	r17, 0xFF	; 255
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	f8 01       	movw	r30, r16
    26fc:	91 83       	std	Z+1, r25	; 0x01
    26fe:	80 83       	st	Z, r24
    2700:	1f c0       	rjmp	.+62     	; 0x2740 <LCD_displayCharacter+0x134>
    2702:	fe 01       	movw	r30, r28
    2704:	e9 5a       	subi	r30, 0xA9	; 169
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 e9       	ldi	r24, 0x90	; 144
    270a:	91 e0       	ldi	r25, 0x01	; 1
    270c:	91 83       	std	Z+1, r25	; 0x01
    270e:	80 83       	st	Z, r24
    2710:	fe 01       	movw	r30, r28
    2712:	e9 5a       	subi	r30, 0xA9	; 169
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_displayCharacter+0x10e>
    271e:	fe 01       	movw	r30, r28
    2720:	e9 5a       	subi	r30, 0xA9	; 169
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2728:	de 01       	movw	r26, r28
    272a:	a7 5a       	subi	r26, 0xA7	; 167
    272c:	bf 4f       	sbci	r27, 0xFF	; 255
    272e:	fe 01       	movw	r30, r28
    2730:	e7 5a       	subi	r30, 0xA7	; 167
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	11 96       	adiw	r26, 0x01	; 1
    273c:	9c 93       	st	X, r25
    273e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2740:	fe 01       	movw	r30, r28
    2742:	e7 5a       	subi	r30, 0xA7	; 167
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 81       	ld	r24, Z
    2748:	91 81       	ldd	r25, Z+1	; 0x01
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	d1 f6       	brne	.-76     	; 0x2702 <LCD_displayCharacter+0xf6>
    274e:	27 c0       	rjmp	.+78     	; 0x279e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	8e 01       	movw	r16, r28
    2752:	07 5a       	subi	r16, 0xA7	; 167
    2754:	1f 4f       	sbci	r17, 0xFF	; 255
    2756:	fe 01       	movw	r30, r28
    2758:	e5 5a       	subi	r30, 0xA5	; 165
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	f8 01       	movw	r30, r16
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	80 83       	st	Z, r24
    2772:	de 01       	movw	r26, r28
    2774:	ab 5a       	subi	r26, 0xAB	; 171
    2776:	bf 4f       	sbci	r27, 0xFF	; 255
    2778:	fe 01       	movw	r30, r28
    277a:	e7 5a       	subi	r30, 0xA7	; 167
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	8d 93       	st	X+, r24
    2784:	9c 93       	st	X, r25
    2786:	fe 01       	movw	r30, r28
    2788:	eb 5a       	subi	r30, 0xAB	; 171
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	91 81       	ldd	r25, Z+1	; 0x01
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_displayCharacter+0x184>
    2794:	fe 01       	movw	r30, r28
    2796:	eb 5a       	subi	r30, 0xAB	; 171
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	62 e0       	ldi	r22, 0x02	; 2
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    27a8:	fe 01       	movw	r30, r28
    27aa:	ef 5a       	subi	r30, 0xAF	; 175
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	a0 e8       	ldi	r26, 0x80	; 128
    27b4:	bf e3       	ldi	r27, 0x3F	; 63
    27b6:	80 83       	st	Z, r24
    27b8:	91 83       	std	Z+1, r25	; 0x01
    27ba:	a2 83       	std	Z+2, r26	; 0x02
    27bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27be:	8e 01       	movw	r16, r28
    27c0:	03 5b       	subi	r16, 0xB3	; 179
    27c2:	1f 4f       	sbci	r17, 0xFF	; 255
    27c4:	fe 01       	movw	r30, r28
    27c6:	ef 5a       	subi	r30, 0xAF	; 175
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	60 81       	ld	r22, Z
    27cc:	71 81       	ldd	r23, Z+1	; 0x01
    27ce:	82 81       	ldd	r24, Z+2	; 0x02
    27d0:	93 81       	ldd	r25, Z+3	; 0x03
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	4a e7       	ldi	r20, 0x7A	; 122
    27d8:	55 e4       	ldi	r21, 0x45	; 69
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	f8 01       	movw	r30, r16
    27e4:	80 83       	st	Z, r24
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	a2 83       	std	Z+2, r26	; 0x02
    27ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ec:	fe 01       	movw	r30, r28
    27ee:	e3 5b       	subi	r30, 0xB3	; 179
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	60 81       	ld	r22, Z
    27f4:	71 81       	ldd	r23, Z+1	; 0x01
    27f6:	82 81       	ldd	r24, Z+2	; 0x02
    27f8:	93 81       	ldd	r25, Z+3	; 0x03
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	44 f4       	brge	.+16     	; 0x281a <LCD_displayCharacter+0x20e>
		__ticks = 1;
    280a:	fe 01       	movw	r30, r28
    280c:	e5 5b       	subi	r30, 0xB5	; 181
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	80 83       	st	Z, r24
    2818:	64 c0       	rjmp	.+200    	; 0x28e2 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    281a:	fe 01       	movw	r30, r28
    281c:	e3 5b       	subi	r30, 0xB3	; 179
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	3f ef       	ldi	r19, 0xFF	; 255
    282c:	4f e7       	ldi	r20, 0x7F	; 127
    282e:	57 e4       	ldi	r21, 0x47	; 71
    2830:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2834:	18 16       	cp	r1, r24
    2836:	0c f0       	brlt	.+2      	; 0x283a <LCD_displayCharacter+0x22e>
    2838:	43 c0       	rjmp	.+134    	; 0x28c0 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283a:	fe 01       	movw	r30, r28
    283c:	ef 5a       	subi	r30, 0xAF	; 175
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	60 81       	ld	r22, Z
    2842:	71 81       	ldd	r23, Z+1	; 0x01
    2844:	82 81       	ldd	r24, Z+2	; 0x02
    2846:	93 81       	ldd	r25, Z+3	; 0x03
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e2       	ldi	r20, 0x20	; 32
    284e:	51 e4       	ldi	r21, 0x41	; 65
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	8e 01       	movw	r16, r28
    285a:	05 5b       	subi	r16, 0xB5	; 181
    285c:	1f 4f       	sbci	r17, 0xFF	; 255
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	f8 01       	movw	r30, r16
    286c:	91 83       	std	Z+1, r25	; 0x01
    286e:	80 83       	st	Z, r24
    2870:	1f c0       	rjmp	.+62     	; 0x28b0 <LCD_displayCharacter+0x2a4>
    2872:	fe 01       	movw	r30, r28
    2874:	e7 5b       	subi	r30, 0xB7	; 183
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 e9       	ldi	r24, 0x90	; 144
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
    2880:	fe 01       	movw	r30, r28
    2882:	e7 5b       	subi	r30, 0xB7	; 183
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <LCD_displayCharacter+0x27e>
    288e:	fe 01       	movw	r30, r28
    2890:	e7 5b       	subi	r30, 0xB7	; 183
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	91 83       	std	Z+1, r25	; 0x01
    2896:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2898:	de 01       	movw	r26, r28
    289a:	a5 5b       	subi	r26, 0xB5	; 181
    289c:	bf 4f       	sbci	r27, 0xFF	; 255
    289e:	fe 01       	movw	r30, r28
    28a0:	e5 5b       	subi	r30, 0xB5	; 181
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 81       	ld	r24, Z
    28a6:	91 81       	ldd	r25, Z+1	; 0x01
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	11 96       	adiw	r26, 0x01	; 1
    28ac:	9c 93       	st	X, r25
    28ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b0:	fe 01       	movw	r30, r28
    28b2:	e5 5b       	subi	r30, 0xB5	; 181
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	80 81       	ld	r24, Z
    28b8:	91 81       	ldd	r25, Z+1	; 0x01
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	d1 f6       	brne	.-76     	; 0x2872 <LCD_displayCharacter+0x266>
    28be:	27 c0       	rjmp	.+78     	; 0x290e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	8e 01       	movw	r16, r28
    28c2:	05 5b       	subi	r16, 0xB5	; 181
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	fe 01       	movw	r30, r28
    28c8:	e3 5b       	subi	r30, 0xB3	; 179
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	82 81       	ldd	r24, Z+2	; 0x02
    28d2:	93 81       	ldd	r25, Z+3	; 0x03
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	f8 01       	movw	r30, r16
    28de:	91 83       	std	Z+1, r25	; 0x01
    28e0:	80 83       	st	Z, r24
    28e2:	de 01       	movw	r26, r28
    28e4:	a9 5b       	subi	r26, 0xB9	; 185
    28e6:	bf 4f       	sbci	r27, 0xFF	; 255
    28e8:	fe 01       	movw	r30, r28
    28ea:	e5 5b       	subi	r30, 0xB5	; 181
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	8d 93       	st	X+, r24
    28f4:	9c 93       	st	X, r25
    28f6:	fe 01       	movw	r30, r28
    28f8:	e9 5b       	subi	r30, 0xB9	; 185
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <LCD_displayCharacter+0x2f4>
    2904:	fe 01       	movw	r30, r28
    2906:	e9 5b       	subi	r30, 0xB9	; 185
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    290e:	fe 01       	movw	r30, r28
    2910:	ed 59       	subi	r30, 0x9D	; 157
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 81       	ld	r24, Z
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	80 71       	andi	r24, 0x10	; 16
    291c:	90 70       	andi	r25, 0x00	; 0
    291e:	95 95       	asr	r25
    2920:	87 95       	ror	r24
    2922:	95 95       	asr	r25
    2924:	87 95       	ror	r24
    2926:	95 95       	asr	r25
    2928:	87 95       	ror	r24
    292a:	95 95       	asr	r25
    292c:	87 95       	ror	r24
    292e:	98 2f       	mov	r25, r24
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	63 e0       	ldi	r22, 0x03	; 3
    2934:	49 2f       	mov	r20, r25
    2936:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    293a:	fe 01       	movw	r30, r28
    293c:	ed 59       	subi	r30, 0x9D	; 157
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	88 2f       	mov	r24, r24
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	80 72       	andi	r24, 0x20	; 32
    2948:	90 70       	andi	r25, 0x00	; 0
    294a:	95 95       	asr	r25
    294c:	87 95       	ror	r24
    294e:	95 95       	asr	r25
    2950:	87 95       	ror	r24
    2952:	95 95       	asr	r25
    2954:	87 95       	ror	r24
    2956:	95 95       	asr	r25
    2958:	87 95       	ror	r24
    295a:	95 95       	asr	r25
    295c:	87 95       	ror	r24
    295e:	98 2f       	mov	r25, r24
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	64 e0       	ldi	r22, 0x04	; 4
    2964:	49 2f       	mov	r20, r25
    2966:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    296a:	fe 01       	movw	r30, r28
    296c:	ed 59       	subi	r30, 0x9D	; 157
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 81       	ld	r24, Z
    2972:	88 2f       	mov	r24, r24
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	80 74       	andi	r24, 0x40	; 64
    2978:	90 70       	andi	r25, 0x00	; 0
    297a:	08 2e       	mov	r0, r24
    297c:	89 2f       	mov	r24, r25
    297e:	00 0c       	add	r0, r0
    2980:	88 1f       	adc	r24, r24
    2982:	99 0b       	sbc	r25, r25
    2984:	00 0c       	add	r0, r0
    2986:	88 1f       	adc	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	98 2f       	mov	r25, r24
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	65 e0       	ldi	r22, 0x05	; 5
    2990:	49 2f       	mov	r20, r25
    2992:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2996:	fe 01       	movw	r30, r28
    2998:	ed 59       	subi	r30, 0x9D	; 157
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 81       	ld	r24, Z
    299e:	98 2f       	mov	r25, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	99 27       	eor	r25, r25
    29a4:	99 1f       	adc	r25, r25
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	66 e0       	ldi	r22, 0x06	; 6
    29aa:	49 2f       	mov	r20, r25
    29ac:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    29b0:	fe 01       	movw	r30, r28
    29b2:	ed 5b       	subi	r30, 0xBD	; 189
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	a0 e8       	ldi	r26, 0x80	; 128
    29bc:	bf e3       	ldi	r27, 0x3F	; 63
    29be:	80 83       	st	Z, r24
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	a2 83       	std	Z+2, r26	; 0x02
    29c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c6:	8e 01       	movw	r16, r28
    29c8:	01 5c       	subi	r16, 0xC1	; 193
    29ca:	1f 4f       	sbci	r17, 0xFF	; 255
    29cc:	fe 01       	movw	r30, r28
    29ce:	ed 5b       	subi	r30, 0xBD	; 189
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	60 81       	ld	r22, Z
    29d4:	71 81       	ldd	r23, Z+1	; 0x01
    29d6:	82 81       	ldd	r24, Z+2	; 0x02
    29d8:	93 81       	ldd	r25, Z+3	; 0x03
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	4a e7       	ldi	r20, 0x7A	; 122
    29e0:	55 e4       	ldi	r21, 0x45	; 69
    29e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	f8 01       	movw	r30, r16
    29ec:	80 83       	st	Z, r24
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	a2 83       	std	Z+2, r26	; 0x02
    29f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29f4:	fe 01       	movw	r30, r28
    29f6:	ff 96       	adiw	r30, 0x3f	; 63
    29f8:	60 81       	ld	r22, Z
    29fa:	71 81       	ldd	r23, Z+1	; 0x01
    29fc:	82 81       	ldd	r24, Z+2	; 0x02
    29fe:	93 81       	ldd	r25, Z+3	; 0x03
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e8       	ldi	r20, 0x80	; 128
    2a06:	5f e3       	ldi	r21, 0x3F	; 63
    2a08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a0c:	88 23       	and	r24, r24
    2a0e:	2c f4       	brge	.+10     	; 0x2a1a <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	9e af       	std	Y+62, r25	; 0x3e
    2a16:	8d af       	std	Y+61, r24	; 0x3d
    2a18:	46 c0       	rjmp	.+140    	; 0x2aa6 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	ff 96       	adiw	r30, 0x3f	; 63
    2a1e:	60 81       	ld	r22, Z
    2a20:	71 81       	ldd	r23, Z+1	; 0x01
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	3f ef       	ldi	r19, 0xFF	; 255
    2a2a:	4f e7       	ldi	r20, 0x7F	; 127
    2a2c:	57 e4       	ldi	r21, 0x47	; 71
    2a2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	64 f5       	brge	.+88     	; 0x2a8e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	fe 01       	movw	r30, r28
    2a38:	ed 5b       	subi	r30, 0xBD	; 189
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	60 81       	ld	r22, Z
    2a3e:	71 81       	ldd	r23, Z+1	; 0x01
    2a40:	82 81       	ldd	r24, Z+2	; 0x02
    2a42:	93 81       	ldd	r25, Z+3	; 0x03
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e2       	ldi	r20, 0x20	; 32
    2a4a:	51 e4       	ldi	r21, 0x41	; 65
    2a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	9e af       	std	Y+62, r25	; 0x3e
    2a62:	8d af       	std	Y+61, r24	; 0x3d
    2a64:	0f c0       	rjmp	.+30     	; 0x2a84 <LCD_displayCharacter+0x478>
    2a66:	80 e9       	ldi	r24, 0x90	; 144
    2a68:	91 e0       	ldi	r25, 0x01	; 1
    2a6a:	9c af       	std	Y+60, r25	; 0x3c
    2a6c:	8b af       	std	Y+59, r24	; 0x3b
    2a6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a70:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <LCD_displayCharacter+0x466>
    2a76:	9c af       	std	Y+60, r25	; 0x3c
    2a78:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	9e af       	std	Y+62, r25	; 0x3e
    2a82:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a86:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	69 f7       	brne	.-38     	; 0x2a66 <LCD_displayCharacter+0x45a>
    2a8c:	16 c0       	rjmp	.+44     	; 0x2aba <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ff 96       	adiw	r30, 0x3f	; 63
    2a92:	60 81       	ld	r22, Z
    2a94:	71 81       	ldd	r23, Z+1	; 0x01
    2a96:	82 81       	ldd	r24, Z+2	; 0x02
    2a98:	93 81       	ldd	r25, Z+3	; 0x03
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9e af       	std	Y+62, r25	; 0x3e
    2aa4:	8d af       	std	Y+61, r24	; 0x3d
    2aa6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aa8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aaa:	9a af       	std	Y+58, r25	; 0x3a
    2aac:	89 af       	std	Y+57, r24	; 0x39
    2aae:	89 ad       	ldd	r24, Y+57	; 0x39
    2ab0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <LCD_displayCharacter+0x4a6>
    2ab6:	9a af       	std	Y+58, r25	; 0x3a
    2ab8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	62 e0       	ldi	r22, 0x02	; 2
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e8       	ldi	r26, 0x80	; 128
    2aca:	bf e3       	ldi	r27, 0x3F	; 63
    2acc:	8d ab       	std	Y+53, r24	; 0x35
    2ace:	9e ab       	std	Y+54, r25	; 0x36
    2ad0:	af ab       	std	Y+55, r26	; 0x37
    2ad2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ad6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ad8:	8f a9       	ldd	r24, Y+55	; 0x37
    2ada:	98 ad       	ldd	r25, Y+56	; 0x38
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a e7       	ldi	r20, 0x7A	; 122
    2ae2:	55 e4       	ldi	r21, 0x45	; 69
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	89 ab       	std	Y+49, r24	; 0x31
    2aee:	9a ab       	std	Y+50, r25	; 0x32
    2af0:	ab ab       	std	Y+51, r26	; 0x33
    2af2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2af4:	69 a9       	ldd	r22, Y+49	; 0x31
    2af6:	7a a9       	ldd	r23, Y+50	; 0x32
    2af8:	8b a9       	ldd	r24, Y+51	; 0x33
    2afa:	9c a9       	ldd	r25, Y+52	; 0x34
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	98 ab       	std	Y+48, r25	; 0x30
    2b12:	8f a7       	std	Y+47, r24	; 0x2f
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2b16:	69 a9       	ldd	r22, Y+49	; 0x31
    2b18:	7a a9       	ldd	r23, Y+50	; 0x32
    2b1a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b1c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	6d a9       	ldd	r22, Y+53	; 0x35
    2b30:	7e a9       	ldd	r23, Y+54	; 0x36
    2b32:	8f a9       	ldd	r24, Y+55	; 0x37
    2b34:	98 ad       	ldd	r25, Y+56	; 0x38
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	98 ab       	std	Y+48, r25	; 0x30
    2b54:	8f a7       	std	Y+47, r24	; 0x2f
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <LCD_displayCharacter+0x56a>
    2b58:	80 e9       	ldi	r24, 0x90	; 144
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	9e a7       	std	Y+46, r25	; 0x2e
    2b5e:	8d a7       	std	Y+45, r24	; 0x2d
    2b60:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b62:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <LCD_displayCharacter+0x558>
    2b68:	9e a7       	std	Y+46, r25	; 0x2e
    2b6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	98 ab       	std	Y+48, r25	; 0x30
    2b74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b78:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <LCD_displayCharacter+0x54c>
    2b7e:	14 c0       	rjmp	.+40     	; 0x2ba8 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	69 a9       	ldd	r22, Y+49	; 0x31
    2b82:	7a a9       	ldd	r23, Y+50	; 0x32
    2b84:	8b a9       	ldd	r24, Y+51	; 0x33
    2b86:	9c a9       	ldd	r25, Y+52	; 0x34
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	98 ab       	std	Y+48, r25	; 0x30
    2b92:	8f a7       	std	Y+47, r24	; 0x2f
    2b94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b96:	98 a9       	ldd	r25, Y+48	; 0x30
    2b98:	9c a7       	std	Y+44, r25	; 0x2c
    2b9a:	8b a7       	std	Y+43, r24	; 0x2b
    2b9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <LCD_displayCharacter+0x594>
    2ba4:	9c a7       	std	Y+44, r25	; 0x2c
    2ba6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	62 e0       	ldi	r22, 0x02	; 2
    2bac:	41 e0       	ldi	r20, 0x01	; 1
    2bae:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	a0 e8       	ldi	r26, 0x80	; 128
    2bb8:	bf e3       	ldi	r27, 0x3F	; 63
    2bba:	8f a3       	std	Y+39, r24	; 0x27
    2bbc:	98 a7       	std	Y+40, r25	; 0x28
    2bbe:	a9 a7       	std	Y+41, r26	; 0x29
    2bc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc4:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc6:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4a e7       	ldi	r20, 0x7A	; 122
    2bd0:	55 e4       	ldi	r21, 0x45	; 69
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	8b a3       	std	Y+35, r24	; 0x23
    2bdc:	9c a3       	std	Y+36, r25	; 0x24
    2bde:	ad a3       	std	Y+37, r26	; 0x25
    2be0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2be2:	6b a1       	ldd	r22, Y+35	; 0x23
    2be4:	7c a1       	ldd	r23, Y+36	; 0x24
    2be6:	8d a1       	ldd	r24, Y+37	; 0x25
    2be8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e8       	ldi	r20, 0x80	; 128
    2bf0:	5f e3       	ldi	r21, 0x3F	; 63
    2bf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf6:	88 23       	and	r24, r24
    2bf8:	2c f4       	brge	.+10     	; 0x2c04 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9a a3       	std	Y+34, r25	; 0x22
    2c00:	89 a3       	std	Y+33, r24	; 0x21
    2c02:	3f c0       	rjmp	.+126    	; 0x2c82 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2c04:	6b a1       	ldd	r22, Y+35	; 0x23
    2c06:	7c a1       	ldd	r23, Y+36	; 0x24
    2c08:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	4c f5       	brge	.+82     	; 0x2c6e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c1e:	78 a5       	ldd	r23, Y+40	; 0x28
    2c20:	89 a5       	ldd	r24, Y+41	; 0x29
    2c22:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e2       	ldi	r20, 0x20	; 32
    2c2a:	51 e4       	ldi	r21, 0x41	; 65
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9a a3       	std	Y+34, r25	; 0x22
    2c42:	89 a3       	std	Y+33, r24	; 0x21
    2c44:	0f c0       	rjmp	.+30     	; 0x2c64 <LCD_displayCharacter+0x658>
    2c46:	80 e9       	ldi	r24, 0x90	; 144
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	98 a3       	std	Y+32, r25	; 0x20
    2c4c:	8f 8f       	std	Y+31, r24	; 0x1f
    2c4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c50:	98 a1       	ldd	r25, Y+32	; 0x20
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <LCD_displayCharacter+0x646>
    2c56:	98 a3       	std	Y+32, r25	; 0x20
    2c58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	9a a3       	std	Y+34, r25	; 0x22
    2c62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c64:	89 a1       	ldd	r24, Y+33	; 0x21
    2c66:	9a a1       	ldd	r25, Y+34	; 0x22
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	69 f7       	brne	.-38     	; 0x2c46 <LCD_displayCharacter+0x63a>
    2c6c:	14 c0       	rjmp	.+40     	; 0x2c96 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c70:	7c a1       	ldd	r23, Y+36	; 0x24
    2c72:	8d a1       	ldd	r24, Y+37	; 0x25
    2c74:	9e a1       	ldd	r25, Y+38	; 0x26
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9a a3       	std	Y+34, r25	; 0x22
    2c80:	89 a3       	std	Y+33, r24	; 0x21
    2c82:	89 a1       	ldd	r24, Y+33	; 0x21
    2c84:	9a a1       	ldd	r25, Y+34	; 0x22
    2c86:	9e 8f       	std	Y+30, r25	; 0x1e
    2c88:	8d 8f       	std	Y+29, r24	; 0x1d
    2c8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <LCD_displayCharacter+0x682>
    2c92:	9e 8f       	std	Y+30, r25	; 0x1e
    2c94:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2c96:	fe 01       	movw	r30, r28
    2c98:	ed 59       	subi	r30, 0x9D	; 157
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	80 81       	ld	r24, Z
    2c9e:	98 2f       	mov	r25, r24
    2ca0:	91 70       	andi	r25, 0x01	; 1
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	63 e0       	ldi	r22, 0x03	; 3
    2ca6:	49 2f       	mov	r20, r25
    2ca8:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2cac:	fe 01       	movw	r30, r28
    2cae:	ed 59       	subi	r30, 0x9D	; 157
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	88 2f       	mov	r24, r24
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	82 70       	andi	r24, 0x02	; 2
    2cba:	90 70       	andi	r25, 0x00	; 0
    2cbc:	95 95       	asr	r25
    2cbe:	87 95       	ror	r24
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	64 e0       	ldi	r22, 0x04	; 4
    2cc6:	49 2f       	mov	r20, r25
    2cc8:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ed 59       	subi	r30, 0x9D	; 157
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	88 2f       	mov	r24, r24
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	84 70       	andi	r24, 0x04	; 4
    2cda:	90 70       	andi	r25, 0x00	; 0
    2cdc:	95 95       	asr	r25
    2cde:	87 95       	ror	r24
    2ce0:	95 95       	asr	r25
    2ce2:	87 95       	ror	r24
    2ce4:	98 2f       	mov	r25, r24
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	65 e0       	ldi	r22, 0x05	; 5
    2cea:	49 2f       	mov	r20, r25
    2cec:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ed 59       	subi	r30, 0x9D	; 157
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	88 2f       	mov	r24, r24
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	88 70       	andi	r24, 0x08	; 8
    2cfe:	90 70       	andi	r25, 0x00	; 0
    2d00:	95 95       	asr	r25
    2d02:	87 95       	ror	r24
    2d04:	95 95       	asr	r25
    2d06:	87 95       	ror	r24
    2d08:	95 95       	asr	r25
    2d0a:	87 95       	ror	r24
    2d0c:	98 2f       	mov	r25, r24
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	66 e0       	ldi	r22, 0x06	; 6
    2d12:	49 2f       	mov	r20, r25
    2d14:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	a0 e8       	ldi	r26, 0x80	; 128
    2d1e:	bf e3       	ldi	r27, 0x3F	; 63
    2d20:	89 8f       	std	Y+25, r24	; 0x19
    2d22:	9a 8f       	std	Y+26, r25	; 0x1a
    2d24:	ab 8f       	std	Y+27, r26	; 0x1b
    2d26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d28:	69 8d       	ldd	r22, Y+25	; 0x19
    2d2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	4a e7       	ldi	r20, 0x7A	; 122
    2d36:	55 e4       	ldi	r21, 0x45	; 69
    2d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	8d 8b       	std	Y+21, r24	; 0x15
    2d42:	9e 8b       	std	Y+22, r25	; 0x16
    2d44:	af 8b       	std	Y+23, r26	; 0x17
    2d46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d48:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e8       	ldi	r20, 0x80	; 128
    2d56:	5f e3       	ldi	r21, 0x3F	; 63
    2d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d5c:	88 23       	and	r24, r24
    2d5e:	2c f4       	brge	.+10     	; 0x2d6a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	9c 8b       	std	Y+20, r25	; 0x14
    2d66:	8b 8b       	std	Y+19, r24	; 0x13
    2d68:	3f c0       	rjmp	.+126    	; 0x2de8 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d70:	98 8d       	ldd	r25, Y+24	; 0x18
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	3f ef       	ldi	r19, 0xFF	; 255
    2d76:	4f e7       	ldi	r20, 0x7F	; 127
    2d78:	57 e4       	ldi	r21, 0x47	; 71
    2d7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d7e:	18 16       	cp	r1, r24
    2d80:	4c f5       	brge	.+82     	; 0x2dd4 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d82:	69 8d       	ldd	r22, Y+25	; 0x19
    2d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e2       	ldi	r20, 0x20	; 32
    2d90:	51 e4       	ldi	r21, 0x41	; 65
    2d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	bc 01       	movw	r22, r24
    2d9c:	cd 01       	movw	r24, r26
    2d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	9c 8b       	std	Y+20, r25	; 0x14
    2da8:	8b 8b       	std	Y+19, r24	; 0x13
    2daa:	0f c0       	rjmp	.+30     	; 0x2dca <LCD_displayCharacter+0x7be>
    2dac:	80 e9       	ldi	r24, 0x90	; 144
    2dae:	91 e0       	ldi	r25, 0x01	; 1
    2db0:	9a 8b       	std	Y+18, r25	; 0x12
    2db2:	89 8b       	std	Y+17, r24	; 0x11
    2db4:	89 89       	ldd	r24, Y+17	; 0x11
    2db6:	9a 89       	ldd	r25, Y+18	; 0x12
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <LCD_displayCharacter+0x7ac>
    2dbc:	9a 8b       	std	Y+18, r25	; 0x12
    2dbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	9c 8b       	std	Y+20, r25	; 0x14
    2dc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dca:	8b 89       	ldd	r24, Y+19	; 0x13
    2dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	69 f7       	brne	.-38     	; 0x2dac <LCD_displayCharacter+0x7a0>
    2dd2:	14 c0       	rjmp	.+40     	; 0x2dfc <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dda:	98 8d       	ldd	r25, Y+24	; 0x18
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	9c 8b       	std	Y+20, r25	; 0x14
    2de6:	8b 8b       	std	Y+19, r24	; 0x13
    2de8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dea:	9c 89       	ldd	r25, Y+20	; 0x14
    2dec:	98 8b       	std	Y+16, r25	; 0x10
    2dee:	8f 87       	std	Y+15, r24	; 0x0f
    2df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2df2:	98 89       	ldd	r25, Y+16	; 0x10
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <LCD_displayCharacter+0x7e8>
    2df8:	98 8b       	std	Y+16, r25	; 0x10
    2dfa:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	62 e0       	ldi	r22, 0x02	; 2
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	a0 e8       	ldi	r26, 0x80	; 128
    2e0c:	bf e3       	ldi	r27, 0x3F	; 63
    2e0e:	8b 87       	std	Y+11, r24	; 0x0b
    2e10:	9c 87       	std	Y+12, r25	; 0x0c
    2e12:	ad 87       	std	Y+13, r26	; 0x0d
    2e14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	4a e7       	ldi	r20, 0x7A	; 122
    2e24:	55 e4       	ldi	r21, 0x45	; 69
    2e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	8f 83       	std	Y+7, r24	; 0x07
    2e30:	98 87       	std	Y+8, r25	; 0x08
    2e32:	a9 87       	std	Y+9, r26	; 0x09
    2e34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e36:	6f 81       	ldd	r22, Y+7	; 0x07
    2e38:	78 85       	ldd	r23, Y+8	; 0x08
    2e3a:	89 85       	ldd	r24, Y+9	; 0x09
    2e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	40 e8       	ldi	r20, 0x80	; 128
    2e44:	5f e3       	ldi	r21, 0x3F	; 63
    2e46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e4a:	88 23       	and	r24, r24
    2e4c:	2c f4       	brge	.+10     	; 0x2e58 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	9e 83       	std	Y+6, r25	; 0x06
    2e54:	8d 83       	std	Y+5, r24	; 0x05
    2e56:	3f c0       	rjmp	.+126    	; 0x2ed6 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2e58:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5a:	78 85       	ldd	r23, Y+8	; 0x08
    2e5c:	89 85       	ldd	r24, Y+9	; 0x09
    2e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	3f ef       	ldi	r19, 0xFF	; 255
    2e64:	4f e7       	ldi	r20, 0x7F	; 127
    2e66:	57 e4       	ldi	r21, 0x47	; 71
    2e68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e6c:	18 16       	cp	r1, r24
    2e6e:	4c f5       	brge	.+82     	; 0x2ec2 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e2       	ldi	r20, 0x20	; 32
    2e7e:	51 e4       	ldi	r21, 0x41	; 65
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	9e 83       	std	Y+6, r25	; 0x06
    2e96:	8d 83       	std	Y+5, r24	; 0x05
    2e98:	0f c0       	rjmp	.+30     	; 0x2eb8 <LCD_displayCharacter+0x8ac>
    2e9a:	80 e9       	ldi	r24, 0x90	; 144
    2e9c:	91 e0       	ldi	r25, 0x01	; 1
    2e9e:	9c 83       	std	Y+4, r25	; 0x04
    2ea0:	8b 83       	std	Y+3, r24	; 0x03
    2ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <LCD_displayCharacter+0x89a>
    2eaa:	9c 83       	std	Y+4, r25	; 0x04
    2eac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eae:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	9e 83       	std	Y+6, r25	; 0x06
    2eb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eba:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	69 f7       	brne	.-38     	; 0x2e9a <LCD_displayCharacter+0x88e>
    2ec0:	14 c0       	rjmp	.+40     	; 0x2eea <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec4:	78 85       	ldd	r23, Y+8	; 0x08
    2ec6:	89 85       	ldd	r24, Y+9	; 0x09
    2ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	9a 83       	std	Y+2, r25	; 0x02
    2edc:	89 83       	std	Y+1, r24	; 0x01
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	f1 f7       	brne	.-4      	; 0x2ee2 <LCD_displayCharacter+0x8d6>
    2ee6:	9a 83       	std	Y+2, r25	; 0x02
    2ee8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2eea:	cd 59       	subi	r28, 0x9D	; 157
    2eec:	df 4f       	sbci	r29, 0xFF	; 255
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	1f 91       	pop	r17
    2efe:	0f 91       	pop	r16
    2f00:	08 95       	ret

00002f02 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <LCD_displayString+0x6>
    2f08:	0f 92       	push	r0
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	9b 83       	std	Y+3, r25	; 0x03
    2f10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f12:	19 82       	std	Y+1, r1	; 0x01
    2f14:	0e c0       	rjmp	.+28     	; 0x2f32 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	28 2f       	mov	r18, r24
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f20:	fc 01       	movw	r30, r24
    2f22:	e2 0f       	add	r30, r18
    2f24:	f3 1f       	adc	r31, r19
    2f26:	80 81       	ld	r24, Z
    2f28:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_displayCharacter>
		i++;
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	8f 5f       	subi	r24, 0xFF	; 255
    2f30:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	e2 0f       	add	r30, r18
    2f40:	f3 1f       	adc	r31, r19
    2f42:	80 81       	ld	r24, Z
    2f44:	88 23       	and	r24, r24
    2f46:	39 f7       	brne	.-50     	; 0x2f16 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	00 d0       	rcall	.+0      	; 0x2f5a <LCD_moveCursor+0x6>
    2f5a:	00 d0       	rcall	.+0      	; 0x2f5c <LCD_moveCursor+0x8>
    2f5c:	0f 92       	push	r0
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	8a 83       	std	Y+2, r24	; 0x02
    2f64:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	3d 83       	std	Y+5, r19	; 0x05
    2f6e:	2c 83       	std	Y+4, r18	; 0x04
    2f70:	8c 81       	ldd	r24, Y+4	; 0x04
    2f72:	9d 81       	ldd	r25, Y+5	; 0x05
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	91 05       	cpc	r25, r1
    2f78:	c1 f0       	breq	.+48     	; 0x2faa <LCD_moveCursor+0x56>
    2f7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f7e:	22 30       	cpi	r18, 0x02	; 2
    2f80:	31 05       	cpc	r19, r1
    2f82:	2c f4       	brge	.+10     	; 0x2f8e <LCD_moveCursor+0x3a>
    2f84:	8c 81       	ldd	r24, Y+4	; 0x04
    2f86:	9d 81       	ldd	r25, Y+5	; 0x05
    2f88:	00 97       	sbiw	r24, 0x00	; 0
    2f8a:	61 f0       	breq	.+24     	; 0x2fa4 <LCD_moveCursor+0x50>
    2f8c:	19 c0       	rjmp	.+50     	; 0x2fc0 <LCD_moveCursor+0x6c>
    2f8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f90:	3d 81       	ldd	r19, Y+5	; 0x05
    2f92:	22 30       	cpi	r18, 0x02	; 2
    2f94:	31 05       	cpc	r19, r1
    2f96:	69 f0       	breq	.+26     	; 0x2fb2 <LCD_moveCursor+0x5e>
    2f98:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9c:	83 30       	cpi	r24, 0x03	; 3
    2f9e:	91 05       	cpc	r25, r1
    2fa0:	61 f0       	breq	.+24     	; 0x2fba <LCD_moveCursor+0x66>
    2fa2:	0e c0       	rjmp	.+28     	; 0x2fc0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	0b c0       	rjmp	.+22     	; 0x2fc0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	80 5c       	subi	r24, 0xC0	; 192
    2fae:	89 83       	std	Y+1, r24	; 0x01
    2fb0:	07 c0       	rjmp	.+14     	; 0x2fc0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	80 5f       	subi	r24, 0xF0	; 240
    2fb6:	89 83       	std	Y+1, r24	; 0x01
    2fb8:	03 c0       	rjmp	.+6      	; 0x2fc0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	80 5b       	subi	r24, 0xB0	; 176
    2fbe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2fc0:	89 81       	ldd	r24, Y+1	; 0x01
    2fc2:	80 68       	ori	r24, 0x80	; 128
    2fc4:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
}
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <LCD_displayStringRowColumn+0x6>
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <LCD_displayStringRowColumn+0x8>
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	6a 83       	std	Y+2, r22	; 0x02
    2fe8:	5c 83       	std	Y+4, r21	; 0x04
    2fea:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	6a 81       	ldd	r22, Y+2	; 0x02
    2ff0:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff8:	0e 94 81 17 	call	0x2f02	; 0x2f02 <LCD_displayString>
}
    2ffc:	0f 90       	pop	r0
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	62 97       	sbiw	r28, 0x12	; 18
    3014:	0f b6       	in	r0, 0x3f	; 63
    3016:	f8 94       	cli
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	cd bf       	out	0x3d, r28	; 61
    301e:	9a 8b       	std	Y+18, r25	; 0x12
    3020:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3022:	89 89       	ldd	r24, Y+17	; 0x11
    3024:	9a 89       	ldd	r25, Y+18	; 0x12
    3026:	9e 01       	movw	r18, r28
    3028:	2f 5f       	subi	r18, 0xFF	; 255
    302a:	3f 4f       	sbci	r19, 0xFF	; 255
    302c:	b9 01       	movw	r22, r18
    302e:	4a e0       	ldi	r20, 0x0A	; 10
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <itoa>
   LCD_displayString(buff); /* Display the string */
    3036:	ce 01       	movw	r24, r28
    3038:	01 96       	adiw	r24, 0x01	; 1
    303a:	0e 94 81 17 	call	0x2f02	; 0x2f02 <LCD_displayString>
}
    303e:	62 96       	adiw	r28, 0x12	; 18
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3050:	df 93       	push	r29
    3052:	cf 93       	push	r28
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <LCD_sendCommand>
}
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <Buzzer_init>:
 */

#include "../../HAL/BUZZER/Buzzer.h"


void Buzzer_init(void){
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    306c:	82 e0       	ldi	r24, 0x02	; 2
    306e:	65 e0       	ldi	r22, 0x05	; 5
    3070:	41 e0       	ldi	r20, 0x01	; 1
    3072:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID,PIN3_ID,LOGIC_LOW);
    3076:	83 e0       	ldi	r24, 0x03	; 3
    3078:	63 e0       	ldi	r22, 0x03	; 3
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
}
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <Buzzer_On>:


void Buzzer_On(void){
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    308e:	82 e0       	ldi	r24, 0x02	; 2
    3090:	65 e0       	ldi	r22, 0x05	; 5
    3092:	41 e0       	ldi	r20, 0x01	; 1
    3094:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
}
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <Buzzer_Off>:


void Buzzer_Off(void){
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	65 e0       	ldi	r22, 0x05	; 5
    30aa:	40 e0       	ldi	r20, 0x00	; 0
    30ac:	0e 94 1d 08 	call	0x103a	; 0x103a <GPIO_writePin>
}
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <main>:

#include "app.h"
//===============================================================
volatile uint16 distance = 0;  // Distance between Sensor and Object

int main(void) {
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	c6 54       	subi	r28, 0x46	; 70
    30c4:	d0 40       	sbci	r29, 0x00	; 0
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
// Initialization
	LEDS_Init();
    30d0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LEDS_Init>
	Ultrasonic_init();
    30d4:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <Ultrasonic_init>
	LCD_init();
    30d8:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <LCD_init>
	Buzzer_init();
    30dc:	0e 94 32 18 	call	0x3064	; 0x3064 <Buzzer_init>
	sei(); // Enable Globale Interrupt
    30e0:	78 94       	sei
//===================welcome Message==============================
	LCD_displayString("ENG MohamedTarek");
    30e2:	80 e6       	ldi	r24, 0x60	; 96
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	0e 94 81 17 	call	0x2f02	; 0x2f02 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, " Mahmoud Ashraf");
    30ea:	21 e7       	ldi	r18, 0x71	; 113
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	60 e0       	ldi	r22, 0x00	; 0
    30f2:	a9 01       	movw	r20, r18
    30f4:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_displayStringRowColumn>
    30f8:	fe 01       	movw	r30, r28
    30fa:	ed 5b       	subi	r30, 0xBD	; 189
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	aa ef       	ldi	r26, 0xFA	; 250
    3104:	b4 e4       	ldi	r27, 0x44	; 68
    3106:	80 83       	st	Z, r24
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	a2 83       	std	Z+2, r26	; 0x02
    310c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	8e 01       	movw	r16, r28
    3110:	01 5c       	subi	r16, 0xC1	; 193
    3112:	1f 4f       	sbci	r17, 0xFF	; 255
    3114:	fe 01       	movw	r30, r28
    3116:	ed 5b       	subi	r30, 0xBD	; 189
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	60 81       	ld	r22, Z
    311c:	71 81       	ldd	r23, Z+1	; 0x01
    311e:	82 81       	ldd	r24, Z+2	; 0x02
    3120:	93 81       	ldd	r25, Z+3	; 0x03
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	4a e7       	ldi	r20, 0x7A	; 122
    3128:	55 e4       	ldi	r21, 0x45	; 69
    312a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	f8 01       	movw	r30, r16
    3134:	80 83       	st	Z, r24
    3136:	91 83       	std	Z+1, r25	; 0x01
    3138:	a2 83       	std	Z+2, r26	; 0x02
    313a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    313c:	fe 01       	movw	r30, r28
    313e:	ff 96       	adiw	r30, 0x3f	; 63
    3140:	60 81       	ld	r22, Z
    3142:	71 81       	ldd	r23, Z+1	; 0x01
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	93 81       	ldd	r25, Z+3	; 0x03
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e8       	ldi	r20, 0x80	; 128
    314e:	5f e3       	ldi	r21, 0x3F	; 63
    3150:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3154:	88 23       	and	r24, r24
    3156:	2c f4       	brge	.+10     	; 0x3162 <main+0xac>
		__ticks = 1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9e af       	std	Y+62, r25	; 0x3e
    315e:	8d af       	std	Y+61, r24	; 0x3d
    3160:	46 c0       	rjmp	.+140    	; 0x31ee <main+0x138>
	else if (__tmp > 65535)
    3162:	fe 01       	movw	r30, r28
    3164:	ff 96       	adiw	r30, 0x3f	; 63
    3166:	60 81       	ld	r22, Z
    3168:	71 81       	ldd	r23, Z+1	; 0x01
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	3f ef       	ldi	r19, 0xFF	; 255
    3172:	4f e7       	ldi	r20, 0x7F	; 127
    3174:	57 e4       	ldi	r21, 0x47	; 71
    3176:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    317a:	18 16       	cp	r1, r24
    317c:	64 f5       	brge	.+88     	; 0x31d6 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    317e:	fe 01       	movw	r30, r28
    3180:	ed 5b       	subi	r30, 0xBD	; 189
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	60 81       	ld	r22, Z
    3186:	71 81       	ldd	r23, Z+1	; 0x01
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	93 81       	ldd	r25, Z+3	; 0x03
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e2       	ldi	r20, 0x20	; 32
    3192:	51 e4       	ldi	r21, 0x41	; 65
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	bc 01       	movw	r22, r24
    319e:	cd 01       	movw	r24, r26
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	9e af       	std	Y+62, r25	; 0x3e
    31aa:	8d af       	std	Y+61, r24	; 0x3d
    31ac:	0f c0       	rjmp	.+30     	; 0x31cc <main+0x116>
    31ae:	80 e9       	ldi	r24, 0x90	; 144
    31b0:	91 e0       	ldi	r25, 0x01	; 1
    31b2:	9c af       	std	Y+60, r25	; 0x3c
    31b4:	8b af       	std	Y+59, r24	; 0x3b
    31b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    31b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <main+0x104>
    31be:	9c af       	std	Y+60, r25	; 0x3c
    31c0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    31c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	9e af       	std	Y+62, r25	; 0x3e
    31ca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    31ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	69 f7       	brne	.-38     	; 0x31ae <main+0xf8>
    31d4:	16 c0       	rjmp	.+44     	; 0x3202 <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d6:	fe 01       	movw	r30, r28
    31d8:	ff 96       	adiw	r30, 0x3f	; 63
    31da:	60 81       	ld	r22, Z
    31dc:	71 81       	ldd	r23, Z+1	; 0x01
    31de:	82 81       	ldd	r24, Z+2	; 0x02
    31e0:	93 81       	ldd	r25, Z+3	; 0x03
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	9e af       	std	Y+62, r25	; 0x3e
    31ec:	8d af       	std	Y+61, r24	; 0x3d
    31ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    31f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    31f2:	9a af       	std	Y+58, r25	; 0x3a
    31f4:	89 af       	std	Y+57, r24	; 0x39
    31f6:	89 ad       	ldd	r24, Y+57	; 0x39
    31f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    31fa:	01 97       	sbiw	r24, 0x01	; 1
    31fc:	f1 f7       	brne	.-4      	; 0x31fa <main+0x144>
    31fe:	9a af       	std	Y+58, r25	; 0x3a
    3200:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2000);
	LCD_clearScreen();
    3202:	0e 94 28 18 	call	0x3050	; 0x3050 <LCD_clearScreen>
//================================================================
	while (1) {
		distance = Ultrasonic_readDistance(); // Always calculate distance
    3206:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <Ultrasonic_readDistance>
    320a:	88 2f       	mov	r24, r24
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	90 93 a8 00 	sts	0x00A8, r25
    3212:	80 93 a7 00 	sts	0x00A7, r24
		LCD_displayStringRowColumn(0, 1, "Distance: "); // to dispaly on lcd
    3216:	21 e8       	ldi	r18, 0x81	; 129
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	61 e0       	ldi	r22, 0x01	; 1
    321e:	a9 01       	movw	r20, r18
    3220:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_displayStringRowColumn>
// to handel displaying Distance
		if (distance >= 100) {
    3224:	80 91 a7 00 	lds	r24, 0x00A7
    3228:	90 91 a8 00 	lds	r25, 0x00A8
    322c:	84 36       	cpi	r24, 0x64	; 100
    322e:	91 05       	cpc	r25, r1
    3230:	58 f0       	brcs	.+22     	; 0x3248 <main+0x192>
			LCD_intgerToString(distance);
    3232:	80 91 a7 00 	lds	r24, 0x00A7
    3236:	90 91 a8 00 	lds	r25, 0x00A8
    323a:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_intgerToString>
			LCD_displayString("cm");
    323e:	8c e8       	ldi	r24, 0x8C	; 140
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	0e 94 81 17 	call	0x2f02	; 0x2f02 <LCD_displayString>
    3246:	0d c0       	rjmp	.+26     	; 0x3262 <main+0x1ac>
		} else {
			LCD_intgerToString(distance);
    3248:	80 91 a7 00 	lds	r24, 0x00A7
    324c:	90 91 a8 00 	lds	r25, 0x00A8
    3250:	0e 94 05 18 	call	0x300a	; 0x300a <LCD_intgerToString>
			LCD_displayString("cm");
    3254:	8c e8       	ldi	r24, 0x8C	; 140
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	0e 94 81 17 	call	0x2f02	; 0x2f02 <LCD_displayString>
			LCD_displayCharacter(' ');
    325c:	80 e2       	ldi	r24, 0x20	; 32
    325e:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_displayCharacter>
		}
//====================Handel an LEDS Indicator=============================
		if (distance) {      // Handel first start for Sensor
    3262:	80 91 a7 00 	lds	r24, 0x00A7
    3266:	90 91 a8 00 	lds	r25, 0x00A8
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	09 f4       	brne	.+2      	; 0x3270 <main+0x1ba>
    326e:	fb c1       	rjmp	.+1014   	; 0x3666 <main+0x5b0>
			if (distance > 20) {
    3270:	80 91 a7 00 	lds	r24, 0x00A7
    3274:	90 91 a8 00 	lds	r25, 0x00A8
    3278:	85 31       	cpi	r24, 0x15	; 21
    327a:	91 05       	cpc	r25, r1
    327c:	a8 f0       	brcs	.+42     	; 0x32a8 <main+0x1f2>
				Buzzer_Off();
    327e:	0e 94 4f 18 	call	0x309e	; 0x309e <Buzzer_Off>
				LED_Off(LED1);
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LED_Off>
				LED_Off(LED2);
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LED_Off>
				LED_Off(LED3);
    328e:	82 e0       	ldi	r24, 0x02	; 2
    3290:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LED_Off>
				LCD_displayStringRowColumn(1, 5, "    ");
    3294:	2f e8       	ldi	r18, 0x8F	; 143
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	65 e0       	ldi	r22, 0x05	; 5
    329c:	a9 01       	movw	r20, r18
    329e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_displayStringRowColumn>
				Buzzer_Off();
    32a2:	0e 94 4f 18 	call	0x309e	; 0x309e <Buzzer_Off>
    32a6:	af cf       	rjmp	.-162    	; 0x3206 <main+0x150>
			} else if (distance <= 20 && distance >= 16) {
    32a8:	80 91 a7 00 	lds	r24, 0x00A7
    32ac:	90 91 a8 00 	lds	r25, 0x00A8
    32b0:	85 31       	cpi	r24, 0x15	; 21
    32b2:	91 05       	cpc	r25, r1
    32b4:	d0 f4       	brcc	.+52     	; 0x32ea <main+0x234>
    32b6:	80 91 a7 00 	lds	r24, 0x00A7
    32ba:	90 91 a8 00 	lds	r25, 0x00A8
    32be:	80 31       	cpi	r24, 0x10	; 16
    32c0:	91 05       	cpc	r25, r1
    32c2:	98 f0       	brcs	.+38     	; 0x32ea <main+0x234>
				LED_On(LED1);
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LED_On>
				LED_Off(LED2);
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LED_Off>
				LED_Off(LED3);
    32d0:	82 e0       	ldi	r24, 0x02	; 2
    32d2:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LED_Off>
				LCD_displayStringRowColumn(1, 5, "    ");
    32d6:	2f e8       	ldi	r18, 0x8F	; 143
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	65 e0       	ldi	r22, 0x05	; 5
    32de:	a9 01       	movw	r20, r18
    32e0:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_displayStringRowColumn>
				Buzzer_Off();
    32e4:	0e 94 4f 18 	call	0x309e	; 0x309e <Buzzer_Off>
    32e8:	8e cf       	rjmp	.-228    	; 0x3206 <main+0x150>
			} else if (distance <= 15 && distance >= 11) {
    32ea:	80 91 a7 00 	lds	r24, 0x00A7
    32ee:	90 91 a8 00 	lds	r25, 0x00A8
    32f2:	80 31       	cpi	r24, 0x10	; 16
    32f4:	91 05       	cpc	r25, r1
    32f6:	d0 f4       	brcc	.+52     	; 0x332c <main+0x276>
    32f8:	80 91 a7 00 	lds	r24, 0x00A7
    32fc:	90 91 a8 00 	lds	r25, 0x00A8
    3300:	8b 30       	cpi	r24, 0x0B	; 11
    3302:	91 05       	cpc	r25, r1
    3304:	98 f0       	brcs	.+38     	; 0x332c <main+0x276>
				LED_On(LED1);
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LED_On>
				LED_On(LED2);
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LED_On>
				LED_Off(LED3);
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LED_Off>
				LCD_displayStringRowColumn(1, 5, "    ");
    3318:	2f e8       	ldi	r18, 0x8F	; 143
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	65 e0       	ldi	r22, 0x05	; 5
    3320:	a9 01       	movw	r20, r18
    3322:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_displayStringRowColumn>
				Buzzer_Off();
    3326:	0e 94 4f 18 	call	0x309e	; 0x309e <Buzzer_Off>
    332a:	6d cf       	rjmp	.-294    	; 0x3206 <main+0x150>
			} else if (distance <= 10 && distance >= 6) {
    332c:	80 91 a7 00 	lds	r24, 0x00A7
    3330:	90 91 a8 00 	lds	r25, 0x00A8
    3334:	8b 30       	cpi	r24, 0x0B	; 11
    3336:	91 05       	cpc	r25, r1
    3338:	08 f0       	brcs	.+2      	; 0x333c <main+0x286>
    333a:	8d c0       	rjmp	.+282    	; 0x3456 <main+0x3a0>
    333c:	80 91 a7 00 	lds	r24, 0x00A7
    3340:	90 91 a8 00 	lds	r25, 0x00A8
    3344:	86 30       	cpi	r24, 0x06	; 6
    3346:	91 05       	cpc	r25, r1
    3348:	08 f4       	brcc	.+2      	; 0x334c <main+0x296>
    334a:	85 c0       	rjmp	.+266    	; 0x3456 <main+0x3a0>
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	a8 ec       	ldi	r26, 0xC8	; 200
    3352:	b2 e4       	ldi	r27, 0x42	; 66
    3354:	8d ab       	std	Y+53, r24	; 0x35
    3356:	9e ab       	std	Y+54, r25	; 0x36
    3358:	af ab       	std	Y+55, r26	; 0x37
    335a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335c:	6d a9       	ldd	r22, Y+53	; 0x35
    335e:	7e a9       	ldd	r23, Y+54	; 0x36
    3360:	8f a9       	ldd	r24, Y+55	; 0x37
    3362:	98 ad       	ldd	r25, Y+56	; 0x38
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	4a e7       	ldi	r20, 0x7A	; 122
    336a:	55 e4       	ldi	r21, 0x45	; 69
    336c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	89 ab       	std	Y+49, r24	; 0x31
    3376:	9a ab       	std	Y+50, r25	; 0x32
    3378:	ab ab       	std	Y+51, r26	; 0x33
    337a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    337c:	69 a9       	ldd	r22, Y+49	; 0x31
    337e:	7a a9       	ldd	r23, Y+50	; 0x32
    3380:	8b a9       	ldd	r24, Y+51	; 0x33
    3382:	9c a9       	ldd	r25, Y+52	; 0x34
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	40 e8       	ldi	r20, 0x80	; 128
    338a:	5f e3       	ldi	r21, 0x3F	; 63
    338c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3390:	88 23       	and	r24, r24
    3392:	2c f4       	brge	.+10     	; 0x339e <main+0x2e8>
		__ticks = 1;
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	98 ab       	std	Y+48, r25	; 0x30
    339a:	8f a7       	std	Y+47, r24	; 0x2f
    339c:	3f c0       	rjmp	.+126    	; 0x341c <main+0x366>
	else if (__tmp > 65535)
    339e:	69 a9       	ldd	r22, Y+49	; 0x31
    33a0:	7a a9       	ldd	r23, Y+50	; 0x32
    33a2:	8b a9       	ldd	r24, Y+51	; 0x33
    33a4:	9c a9       	ldd	r25, Y+52	; 0x34
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	3f ef       	ldi	r19, 0xFF	; 255
    33aa:	4f e7       	ldi	r20, 0x7F	; 127
    33ac:	57 e4       	ldi	r21, 0x47	; 71
    33ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33b2:	18 16       	cp	r1, r24
    33b4:	4c f5       	brge	.+82     	; 0x3408 <main+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b6:	6d a9       	ldd	r22, Y+53	; 0x35
    33b8:	7e a9       	ldd	r23, Y+54	; 0x36
    33ba:	8f a9       	ldd	r24, Y+55	; 0x37
    33bc:	98 ad       	ldd	r25, Y+56	; 0x38
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e2       	ldi	r20, 0x20	; 32
    33c4:	51 e4       	ldi	r21, 0x41	; 65
    33c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	bc 01       	movw	r22, r24
    33d0:	cd 01       	movw	r24, r26
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	98 ab       	std	Y+48, r25	; 0x30
    33dc:	8f a7       	std	Y+47, r24	; 0x2f
    33de:	0f c0       	rjmp	.+30     	; 0x33fe <main+0x348>
    33e0:	80 e9       	ldi	r24, 0x90	; 144
    33e2:	91 e0       	ldi	r25, 0x01	; 1
    33e4:	9e a7       	std	Y+46, r25	; 0x2e
    33e6:	8d a7       	std	Y+45, r24	; 0x2d
    33e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    33ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <main+0x336>
    33f0:	9e a7       	std	Y+46, r25	; 0x2e
    33f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    33f6:	98 a9       	ldd	r25, Y+48	; 0x30
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	98 ab       	std	Y+48, r25	; 0x30
    33fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3400:	98 a9       	ldd	r25, Y+48	; 0x30
    3402:	00 97       	sbiw	r24, 0x00	; 0
    3404:	69 f7       	brne	.-38     	; 0x33e0 <main+0x32a>
    3406:	14 c0       	rjmp	.+40     	; 0x3430 <main+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3408:	69 a9       	ldd	r22, Y+49	; 0x31
    340a:	7a a9       	ldd	r23, Y+50	; 0x32
    340c:	8b a9       	ldd	r24, Y+51	; 0x33
    340e:	9c a9       	ldd	r25, Y+52	; 0x34
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	98 ab       	std	Y+48, r25	; 0x30
    341a:	8f a7       	std	Y+47, r24	; 0x2f
    341c:	8f a5       	ldd	r24, Y+47	; 0x2f
    341e:	98 a9       	ldd	r25, Y+48	; 0x30
    3420:	9c a7       	std	Y+44, r25	; 0x2c
    3422:	8b a7       	std	Y+43, r24	; 0x2b
    3424:	8b a5       	ldd	r24, Y+43	; 0x2b
    3426:	9c a5       	ldd	r25, Y+44	; 0x2c
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	f1 f7       	brne	.-4      	; 0x3428 <main+0x372>
    342c:	9c a7       	std	Y+44, r25	; 0x2c
    342e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(100);
				LED_On(LED1);
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LED_On>
				LED_On(LED2);
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LED_On>
				LED_On(LED3);
    343c:	82 e0       	ldi	r24, 0x02	; 2
    343e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LED_On>
				Buzzer_Off();
    3442:	0e 94 4f 18 	call	0x309e	; 0x309e <Buzzer_Off>
				LCD_displayStringRowColumn(1, 5, "    ");
    3446:	2f e8       	ldi	r18, 0x8F	; 143
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	81 e0       	ldi	r24, 0x01	; 1
    344c:	65 e0       	ldi	r22, 0x05	; 5
    344e:	a9 01       	movw	r20, r18
    3450:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_displayStringRowColumn>
    3454:	d8 ce       	rjmp	.-592    	; 0x3206 <main+0x150>
			} else if (distance <= 5) {
    3456:	80 91 a7 00 	lds	r24, 0x00A7
    345a:	90 91 a8 00 	lds	r25, 0x00A8
    345e:	86 30       	cpi	r24, 0x06	; 6
    3460:	91 05       	cpc	r25, r1
    3462:	08 f0       	brcs	.+2      	; 0x3466 <main+0x3b0>
    3464:	d0 ce       	rjmp	.-608    	; 0x3206 <main+0x150>
				Buzzer_On();
    3466:	0e 94 43 18 	call	0x3086	; 0x3086 <Buzzer_On>
				LCD_displayStringRowColumn(1, 5, "STOP");
    346a:	24 e9       	ldi	r18, 0x94	; 148
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	65 e0       	ldi	r22, 0x05	; 5
    3472:	a9 01       	movw	r20, r18
    3474:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <LCD_displayStringRowColumn>
				LED_Off(LED1);
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LED_Off>
				LED_Off(LED2);
    347e:	81 e0       	ldi	r24, 0x01	; 1
    3480:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LED_Off>
				LED_Off(LED3);
    3484:	82 e0       	ldi	r24, 0x02	; 2
    3486:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LED_Off>
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	a8 e4       	ldi	r26, 0x48	; 72
    3490:	b3 e4       	ldi	r27, 0x43	; 67
    3492:	8f a3       	std	Y+39, r24	; 0x27
    3494:	98 a7       	std	Y+40, r25	; 0x28
    3496:	a9 a7       	std	Y+41, r26	; 0x29
    3498:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    349a:	6f a1       	ldd	r22, Y+39	; 0x27
    349c:	78 a5       	ldd	r23, Y+40	; 0x28
    349e:	89 a5       	ldd	r24, Y+41	; 0x29
    34a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	4a e7       	ldi	r20, 0x7A	; 122
    34a8:	55 e4       	ldi	r21, 0x45	; 69
    34aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	8b a3       	std	Y+35, r24	; 0x23
    34b4:	9c a3       	std	Y+36, r25	; 0x24
    34b6:	ad a3       	std	Y+37, r26	; 0x25
    34b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34ba:	6b a1       	ldd	r22, Y+35	; 0x23
    34bc:	7c a1       	ldd	r23, Y+36	; 0x24
    34be:	8d a1       	ldd	r24, Y+37	; 0x25
    34c0:	9e a1       	ldd	r25, Y+38	; 0x26
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	40 e8       	ldi	r20, 0x80	; 128
    34c8:	5f e3       	ldi	r21, 0x3F	; 63
    34ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ce:	88 23       	and	r24, r24
    34d0:	2c f4       	brge	.+10     	; 0x34dc <main+0x426>
		__ticks = 1;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	9a a3       	std	Y+34, r25	; 0x22
    34d8:	89 a3       	std	Y+33, r24	; 0x21
    34da:	3f c0       	rjmp	.+126    	; 0x355a <main+0x4a4>
	else if (__tmp > 65535)
    34dc:	6b a1       	ldd	r22, Y+35	; 0x23
    34de:	7c a1       	ldd	r23, Y+36	; 0x24
    34e0:	8d a1       	ldd	r24, Y+37	; 0x25
    34e2:	9e a1       	ldd	r25, Y+38	; 0x26
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	3f ef       	ldi	r19, 0xFF	; 255
    34e8:	4f e7       	ldi	r20, 0x7F	; 127
    34ea:	57 e4       	ldi	r21, 0x47	; 71
    34ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34f0:	18 16       	cp	r1, r24
    34f2:	4c f5       	brge	.+82     	; 0x3546 <main+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f4:	6f a1       	ldd	r22, Y+39	; 0x27
    34f6:	78 a5       	ldd	r23, Y+40	; 0x28
    34f8:	89 a5       	ldd	r24, Y+41	; 0x29
    34fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e2       	ldi	r20, 0x20	; 32
    3502:	51 e4       	ldi	r21, 0x41	; 65
    3504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	bc 01       	movw	r22, r24
    350e:	cd 01       	movw	r24, r26
    3510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	9a a3       	std	Y+34, r25	; 0x22
    351a:	89 a3       	std	Y+33, r24	; 0x21
    351c:	0f c0       	rjmp	.+30     	; 0x353c <main+0x486>
    351e:	80 e9       	ldi	r24, 0x90	; 144
    3520:	91 e0       	ldi	r25, 0x01	; 1
    3522:	98 a3       	std	Y+32, r25	; 0x20
    3524:	8f 8f       	std	Y+31, r24	; 0x1f
    3526:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3528:	98 a1       	ldd	r25, Y+32	; 0x20
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	f1 f7       	brne	.-4      	; 0x352a <main+0x474>
    352e:	98 a3       	std	Y+32, r25	; 0x20
    3530:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3532:	89 a1       	ldd	r24, Y+33	; 0x21
    3534:	9a a1       	ldd	r25, Y+34	; 0x22
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	9a a3       	std	Y+34, r25	; 0x22
    353a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    353c:	89 a1       	ldd	r24, Y+33	; 0x21
    353e:	9a a1       	ldd	r25, Y+34	; 0x22
    3540:	00 97       	sbiw	r24, 0x00	; 0
    3542:	69 f7       	brne	.-38     	; 0x351e <main+0x468>
    3544:	14 c0       	rjmp	.+40     	; 0x356e <main+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3546:	6b a1       	ldd	r22, Y+35	; 0x23
    3548:	7c a1       	ldd	r23, Y+36	; 0x24
    354a:	8d a1       	ldd	r24, Y+37	; 0x25
    354c:	9e a1       	ldd	r25, Y+38	; 0x26
    354e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	9a a3       	std	Y+34, r25	; 0x22
    3558:	89 a3       	std	Y+33, r24	; 0x21
    355a:	89 a1       	ldd	r24, Y+33	; 0x21
    355c:	9a a1       	ldd	r25, Y+34	; 0x22
    355e:	9e 8f       	std	Y+30, r25	; 0x1e
    3560:	8d 8f       	std	Y+29, r24	; 0x1d
    3562:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3564:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3566:	01 97       	sbiw	r24, 0x01	; 1
    3568:	f1 f7       	brne	.-4      	; 0x3566 <main+0x4b0>
    356a:	9e 8f       	std	Y+30, r25	; 0x1e
    356c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(200);
				LED_On(LED1);
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LED_On>
				LED_On(LED2);
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LED_On>
				LED_On(LED3);
    357a:	82 e0       	ldi	r24, 0x02	; 2
    357c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <LED_On>
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	a8 e4       	ldi	r26, 0x48	; 72
    3586:	b3 e4       	ldi	r27, 0x43	; 67
    3588:	89 8f       	std	Y+25, r24	; 0x19
    358a:	9a 8f       	std	Y+26, r25	; 0x1a
    358c:	ab 8f       	std	Y+27, r26	; 0x1b
    358e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3590:	69 8d       	ldd	r22, Y+25	; 0x19
    3592:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3594:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3596:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	4a e7       	ldi	r20, 0x7A	; 122
    359e:	55 e4       	ldi	r21, 0x45	; 69
    35a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	8d 8b       	std	Y+21, r24	; 0x15
    35aa:	9e 8b       	std	Y+22, r25	; 0x16
    35ac:	af 8b       	std	Y+23, r26	; 0x17
    35ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35b0:	6d 89       	ldd	r22, Y+21	; 0x15
    35b2:	7e 89       	ldd	r23, Y+22	; 0x16
    35b4:	8f 89       	ldd	r24, Y+23	; 0x17
    35b6:	98 8d       	ldd	r25, Y+24	; 0x18
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 e8       	ldi	r20, 0x80	; 128
    35be:	5f e3       	ldi	r21, 0x3F	; 63
    35c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35c4:	88 23       	and	r24, r24
    35c6:	2c f4       	brge	.+10     	; 0x35d2 <main+0x51c>
		__ticks = 1;
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	9c 8b       	std	Y+20, r25	; 0x14
    35ce:	8b 8b       	std	Y+19, r24	; 0x13
    35d0:	3f c0       	rjmp	.+126    	; 0x3650 <main+0x59a>
	else if (__tmp > 65535)
    35d2:	6d 89       	ldd	r22, Y+21	; 0x15
    35d4:	7e 89       	ldd	r23, Y+22	; 0x16
    35d6:	8f 89       	ldd	r24, Y+23	; 0x17
    35d8:	98 8d       	ldd	r25, Y+24	; 0x18
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	3f ef       	ldi	r19, 0xFF	; 255
    35de:	4f e7       	ldi	r20, 0x7F	; 127
    35e0:	57 e4       	ldi	r21, 0x47	; 71
    35e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35e6:	18 16       	cp	r1, r24
    35e8:	4c f5       	brge	.+82     	; 0x363c <main+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ea:	69 8d       	ldd	r22, Y+25	; 0x19
    35ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	40 e2       	ldi	r20, 0x20	; 32
    35f8:	51 e4       	ldi	r21, 0x41	; 65
    35fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	bc 01       	movw	r22, r24
    3604:	cd 01       	movw	r24, r26
    3606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	9c 8b       	std	Y+20, r25	; 0x14
    3610:	8b 8b       	std	Y+19, r24	; 0x13
    3612:	0f c0       	rjmp	.+30     	; 0x3632 <main+0x57c>
    3614:	80 e9       	ldi	r24, 0x90	; 144
    3616:	91 e0       	ldi	r25, 0x01	; 1
    3618:	9a 8b       	std	Y+18, r25	; 0x12
    361a:	89 8b       	std	Y+17, r24	; 0x11
    361c:	89 89       	ldd	r24, Y+17	; 0x11
    361e:	9a 89       	ldd	r25, Y+18	; 0x12
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	f1 f7       	brne	.-4      	; 0x3620 <main+0x56a>
    3624:	9a 8b       	std	Y+18, r25	; 0x12
    3626:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3628:	8b 89       	ldd	r24, Y+19	; 0x13
    362a:	9c 89       	ldd	r25, Y+20	; 0x14
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	9c 8b       	std	Y+20, r25	; 0x14
    3630:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3632:	8b 89       	ldd	r24, Y+19	; 0x13
    3634:	9c 89       	ldd	r25, Y+20	; 0x14
    3636:	00 97       	sbiw	r24, 0x00	; 0
    3638:	69 f7       	brne	.-38     	; 0x3614 <main+0x55e>
    363a:	e5 cd       	rjmp	.-1078   	; 0x3206 <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    363c:	6d 89       	ldd	r22, Y+21	; 0x15
    363e:	7e 89       	ldd	r23, Y+22	; 0x16
    3640:	8f 89       	ldd	r24, Y+23	; 0x17
    3642:	98 8d       	ldd	r25, Y+24	; 0x18
    3644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	9c 8b       	std	Y+20, r25	; 0x14
    364e:	8b 8b       	std	Y+19, r24	; 0x13
    3650:	8b 89       	ldd	r24, Y+19	; 0x13
    3652:	9c 89       	ldd	r25, Y+20	; 0x14
    3654:	98 8b       	std	Y+16, r25	; 0x10
    3656:	8f 87       	std	Y+15, r24	; 0x0f
    3658:	8f 85       	ldd	r24, Y+15	; 0x0f
    365a:	98 89       	ldd	r25, Y+16	; 0x10
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <main+0x5a6>
    3660:	98 8b       	std	Y+16, r25	; 0x10
    3662:	8f 87       	std	Y+15, r24	; 0x0f
    3664:	d0 cd       	rjmp	.-1120   	; 0x3206 <main+0x150>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	a8 e4       	ldi	r26, 0x48	; 72
    366c:	b3 e4       	ldi	r27, 0x43	; 67
    366e:	8b 87       	std	Y+11, r24	; 0x0b
    3670:	9c 87       	std	Y+12, r25	; 0x0c
    3672:	ad 87       	std	Y+13, r26	; 0x0d
    3674:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3676:	6b 85       	ldd	r22, Y+11	; 0x0b
    3678:	7c 85       	ldd	r23, Y+12	; 0x0c
    367a:	8d 85       	ldd	r24, Y+13	; 0x0d
    367c:	9e 85       	ldd	r25, Y+14	; 0x0e
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	4a e7       	ldi	r20, 0x7A	; 122
    3684:	55 e4       	ldi	r21, 0x45	; 69
    3686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	8f 83       	std	Y+7, r24	; 0x07
    3690:	98 87       	std	Y+8, r25	; 0x08
    3692:	a9 87       	std	Y+9, r26	; 0x09
    3694:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3696:	6f 81       	ldd	r22, Y+7	; 0x07
    3698:	78 85       	ldd	r23, Y+8	; 0x08
    369a:	89 85       	ldd	r24, Y+9	; 0x09
    369c:	9a 85       	ldd	r25, Y+10	; 0x0a
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e8       	ldi	r20, 0x80	; 128
    36a4:	5f e3       	ldi	r21, 0x3F	; 63
    36a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36aa:	88 23       	and	r24, r24
    36ac:	2c f4       	brge	.+10     	; 0x36b8 <main+0x602>
		__ticks = 1;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	9e 83       	std	Y+6, r25	; 0x06
    36b4:	8d 83       	std	Y+5, r24	; 0x05
    36b6:	3f c0       	rjmp	.+126    	; 0x3736 <main+0x680>
	else if (__tmp > 65535)
    36b8:	6f 81       	ldd	r22, Y+7	; 0x07
    36ba:	78 85       	ldd	r23, Y+8	; 0x08
    36bc:	89 85       	ldd	r24, Y+9	; 0x09
    36be:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	3f ef       	ldi	r19, 0xFF	; 255
    36c4:	4f e7       	ldi	r20, 0x7F	; 127
    36c6:	57 e4       	ldi	r21, 0x47	; 71
    36c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36cc:	18 16       	cp	r1, r24
    36ce:	4c f5       	brge	.+82     	; 0x3722 <main+0x66c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e2       	ldi	r20, 0x20	; 32
    36de:	51 e4       	ldi	r21, 0x41	; 65
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	bc 01       	movw	r22, r24
    36ea:	cd 01       	movw	r24, r26
    36ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	9e 83       	std	Y+6, r25	; 0x06
    36f6:	8d 83       	std	Y+5, r24	; 0x05
    36f8:	0f c0       	rjmp	.+30     	; 0x3718 <main+0x662>
    36fa:	80 e9       	ldi	r24, 0x90	; 144
    36fc:	91 e0       	ldi	r25, 0x01	; 1
    36fe:	9c 83       	std	Y+4, r25	; 0x04
    3700:	8b 83       	std	Y+3, r24	; 0x03
    3702:	8b 81       	ldd	r24, Y+3	; 0x03
    3704:	9c 81       	ldd	r25, Y+4	; 0x04
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	f1 f7       	brne	.-4      	; 0x3706 <main+0x650>
    370a:	9c 83       	std	Y+4, r25	; 0x04
    370c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    370e:	8d 81       	ldd	r24, Y+5	; 0x05
    3710:	9e 81       	ldd	r25, Y+6	; 0x06
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	9e 83       	std	Y+6, r25	; 0x06
    3716:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3718:	8d 81       	ldd	r24, Y+5	; 0x05
    371a:	9e 81       	ldd	r25, Y+6	; 0x06
    371c:	00 97       	sbiw	r24, 0x00	; 0
    371e:	69 f7       	brne	.-38     	; 0x36fa <main+0x644>
    3720:	72 cd       	rjmp	.-1308   	; 0x3206 <main+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3722:	6f 81       	ldd	r22, Y+7	; 0x07
    3724:	78 85       	ldd	r23, Y+8	; 0x08
    3726:	89 85       	ldd	r24, Y+9	; 0x09
    3728:	9a 85       	ldd	r25, Y+10	; 0x0a
    372a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	9e 83       	std	Y+6, r25	; 0x06
    3734:	8d 83       	std	Y+5, r24	; 0x05
    3736:	8d 81       	ldd	r24, Y+5	; 0x05
    3738:	9e 81       	ldd	r25, Y+6	; 0x06
    373a:	9a 83       	std	Y+2, r25	; 0x02
    373c:	89 83       	std	Y+1, r24	; 0x01
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	9a 81       	ldd	r25, Y+2	; 0x02
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	f1 f7       	brne	.-4      	; 0x3742 <main+0x68c>
    3746:	9a 83       	std	Y+2, r25	; 0x02
    3748:	89 83       	std	Y+1, r24	; 0x01
    374a:	5d cd       	rjmp	.-1350   	; 0x3206 <main+0x150>

0000374c <__udivmodhi4>:
    374c:	aa 1b       	sub	r26, r26
    374e:	bb 1b       	sub	r27, r27
    3750:	51 e1       	ldi	r21, 0x11	; 17
    3752:	07 c0       	rjmp	.+14     	; 0x3762 <__udivmodhi4_ep>

00003754 <__udivmodhi4_loop>:
    3754:	aa 1f       	adc	r26, r26
    3756:	bb 1f       	adc	r27, r27
    3758:	a6 17       	cp	r26, r22
    375a:	b7 07       	cpc	r27, r23
    375c:	10 f0       	brcs	.+4      	; 0x3762 <__udivmodhi4_ep>
    375e:	a6 1b       	sub	r26, r22
    3760:	b7 0b       	sbc	r27, r23

00003762 <__udivmodhi4_ep>:
    3762:	88 1f       	adc	r24, r24
    3764:	99 1f       	adc	r25, r25
    3766:	5a 95       	dec	r21
    3768:	a9 f7       	brne	.-22     	; 0x3754 <__udivmodhi4_loop>
    376a:	80 95       	com	r24
    376c:	90 95       	com	r25
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	08 95       	ret

00003774 <__prologue_saves__>:
    3774:	2f 92       	push	r2
    3776:	3f 92       	push	r3
    3778:	4f 92       	push	r4
    377a:	5f 92       	push	r5
    377c:	6f 92       	push	r6
    377e:	7f 92       	push	r7
    3780:	8f 92       	push	r8
    3782:	9f 92       	push	r9
    3784:	af 92       	push	r10
    3786:	bf 92       	push	r11
    3788:	cf 92       	push	r12
    378a:	df 92       	push	r13
    378c:	ef 92       	push	r14
    378e:	ff 92       	push	r15
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	ca 1b       	sub	r28, r26
    379e:	db 0b       	sbc	r29, r27
    37a0:	0f b6       	in	r0, 0x3f	; 63
    37a2:	f8 94       	cli
    37a4:	de bf       	out	0x3e, r29	; 62
    37a6:	0f be       	out	0x3f, r0	; 63
    37a8:	cd bf       	out	0x3d, r28	; 61
    37aa:	09 94       	ijmp

000037ac <__epilogue_restores__>:
    37ac:	2a 88       	ldd	r2, Y+18	; 0x12
    37ae:	39 88       	ldd	r3, Y+17	; 0x11
    37b0:	48 88       	ldd	r4, Y+16	; 0x10
    37b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    37b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    37b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    37b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    37ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    37bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    37be:	b9 84       	ldd	r11, Y+9	; 0x09
    37c0:	c8 84       	ldd	r12, Y+8	; 0x08
    37c2:	df 80       	ldd	r13, Y+7	; 0x07
    37c4:	ee 80       	ldd	r14, Y+6	; 0x06
    37c6:	fd 80       	ldd	r15, Y+5	; 0x05
    37c8:	0c 81       	ldd	r16, Y+4	; 0x04
    37ca:	1b 81       	ldd	r17, Y+3	; 0x03
    37cc:	aa 81       	ldd	r26, Y+2	; 0x02
    37ce:	b9 81       	ldd	r27, Y+1	; 0x01
    37d0:	ce 0f       	add	r28, r30
    37d2:	d1 1d       	adc	r29, r1
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	ed 01       	movw	r28, r26
    37e0:	08 95       	ret

000037e2 <itoa>:
    37e2:	fb 01       	movw	r30, r22
    37e4:	9f 01       	movw	r18, r30
    37e6:	e8 94       	clt
    37e8:	42 30       	cpi	r20, 0x02	; 2
    37ea:	c4 f0       	brlt	.+48     	; 0x381c <itoa+0x3a>
    37ec:	45 32       	cpi	r20, 0x25	; 37
    37ee:	b4 f4       	brge	.+44     	; 0x381c <itoa+0x3a>
    37f0:	4a 30       	cpi	r20, 0x0A	; 10
    37f2:	29 f4       	brne	.+10     	; 0x37fe <itoa+0x1c>
    37f4:	97 fb       	bst	r25, 7
    37f6:	1e f4       	brtc	.+6      	; 0x37fe <itoa+0x1c>
    37f8:	90 95       	com	r25
    37fa:	81 95       	neg	r24
    37fc:	9f 4f       	sbci	r25, 0xFF	; 255
    37fe:	64 2f       	mov	r22, r20
    3800:	77 27       	eor	r23, r23
    3802:	0e 94 a6 1b 	call	0x374c	; 0x374c <__udivmodhi4>
    3806:	80 5d       	subi	r24, 0xD0	; 208
    3808:	8a 33       	cpi	r24, 0x3A	; 58
    380a:	0c f0       	brlt	.+2      	; 0x380e <itoa+0x2c>
    380c:	89 5d       	subi	r24, 0xD9	; 217
    380e:	81 93       	st	Z+, r24
    3810:	cb 01       	movw	r24, r22
    3812:	00 97       	sbiw	r24, 0x00	; 0
    3814:	a1 f7       	brne	.-24     	; 0x37fe <itoa+0x1c>
    3816:	16 f4       	brtc	.+4      	; 0x381c <itoa+0x3a>
    3818:	5d e2       	ldi	r21, 0x2D	; 45
    381a:	51 93       	st	Z+, r21
    381c:	10 82       	st	Z, r1
    381e:	c9 01       	movw	r24, r18
    3820:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <strrev>

00003824 <strrev>:
    3824:	dc 01       	movw	r26, r24
    3826:	fc 01       	movw	r30, r24
    3828:	67 2f       	mov	r22, r23
    382a:	71 91       	ld	r23, Z+
    382c:	77 23       	and	r23, r23
    382e:	e1 f7       	brne	.-8      	; 0x3828 <strrev+0x4>
    3830:	32 97       	sbiw	r30, 0x02	; 2
    3832:	04 c0       	rjmp	.+8      	; 0x383c <strrev+0x18>
    3834:	7c 91       	ld	r23, X
    3836:	6d 93       	st	X+, r22
    3838:	70 83       	st	Z, r23
    383a:	62 91       	ld	r22, -Z
    383c:	ae 17       	cp	r26, r30
    383e:	bf 07       	cpc	r27, r31
    3840:	c8 f3       	brcs	.-14     	; 0x3834 <strrev+0x10>
    3842:	08 95       	ret

00003844 <_exit>:
    3844:	f8 94       	cli

00003846 <__stop_program>:
    3846:	ff cf       	rjmp	.-2      	; 0x3846 <__stop_program>
